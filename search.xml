<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>pytorch-official-code</title>
      <link href="/2020/07/20/pytorch-official-code/"/>
      <url>/2020/07/20/pytorch-official-code/</url>
      
        <content type="html"><![CDATA[<blockquote><hr><p>title: pytorch official code<br>date: 2020-07-20 15:39:44<br>author: Weiruohe<br>categories: AI<br>reprintPolicy: cc_by<br>cover: false<br>tags:</p><ul><li>pytorch</li></ul><hr></blockquote><h3 id="1-numpy"><a href="#1-numpy" class="headerlink" title="1.numpy"></a>1.numpy</h3><p>[^numpy提供n维数组对象，是科学计算的通用框架，不涉及图，深度学习、梯度。但可借助网络手动实现向前向后传递。]: </p><pre><code># -*- coding: utf-8 -*-import numpy as np# N is batch size; D_in is input dimension;# H is hidden dimension; D_out is output dimension.N, D_in, H, D_out = 64, 1000, 100, 10# Create random input and output datax = np.random.randn(N, D_in)y = np.random.randn(N, D_out)# Randomly initialize weightsw1 = np.random.randn(D_in, H)w2 = np.random.randn(H, D_out)learning_rate = 1e-6for t in range(500):    # Forward pass: compute predicted y    h = x.dot(w1)    h_relu = np.maximum(h, 0)    y_pred = h_relu.dot(w2)    # Compute and print loss    loss = np.square(y_pred - y).sum()    print(t, loss)    # Backprop to compute gradients of w1 and w2 with respect to loss    grad_y_pred = 2.0 * (y_pred - y)    grad_w2 = h_relu.T.dot(grad_y_pred)    grad_h_relu = grad_y_pred.dot(w2.T)    grad_h = grad_h_relu.copy()    grad_h[h &lt; 0] = 0    grad_w1 = x.T.dot(grad_h)    # Update weights    w1 -= learning_rate * grad_w1    w2 -= learning_rate * grad_w2</code></pre><p>1.1numpy.random.randn(d0,d1,…,dn)</p><blockquote><p>#rand 函数给定维度生成[0,1)之间的数据，包含0，不包含1</p><p>dn表示每个维度</p><p>返回值为维度为d0<em>d1</em>….*dn的矩阵</p></blockquote><p>1.2range(start,stop,step)函数</p><blockquote><p>start:计数开始点（默认0）</p><p>stop:技术结束点（不包括stop）</p><p>step：步长（默认1）</p></blockquote><p>1.3numpy.dot(arr1,arr2)//numpy.dot(matrix1,matrix2)</p><blockquote><p>求解两数组的内积/矩阵积</p></blockquote><p>1.4numpy.maximum(x,y)</p><blockquote><p>求x与y较大者</p></blockquote><p>1.5numpy.max(a,axis=None,out=None,keepdims=False)</p><blockquote><p>求序列的最值，最少接收一个参数，axis（=0为列向，=1为行向量）</p></blockquote><p>1.6matrix.T(m)</p><blockquote><p>求矩阵的转置</p></blockquote><p>1.7numpy.square(num)</p><blockquote><p>求num的平方</p></blockquote><h3 id="2-Tensor"><a href="#2-Tensor" class="headerlink" title="2.Tensor"></a>2.Tensor</h3><p>[^Tensor是张量，即任意维度的向量，pytorch可以利用GPU加速数字计算，要在GPU上运行pytorch Tensor，需要将其转换为新的数据类型]: </p><pre><code># -*- coding: utf-8 -*-import torchdtype = torch.floatdevice = torch.device("cpu")# device = torch.device("cuda:0") # Uncomment this to run on GPU# N is batch size; D_in is input dimension;# H is hidden dimension; D_out is output dimension.N, D_in, H, D_out = 64, 1000, 100, 10# Create random input and output datax = torch.randn(N, D_in, device=device, dtype=dtype)y = torch.randn(N, D_out, device=device, dtype=dtype)# Randomly initialize weightsw1 = torch.randn(D_in, H, device=device, dtype=dtype)w2 = torch.randn(H, D_out, device=device, dtype=dtype)learning_rate = 1e-6for t in range(500):    # Forward pass: compute predicted y    h = x.mm(w1)    h_relu = h.clamp(min=0)    y_pred = h_relu.mm(w2)    # Compute and print loss    loss = (y_pred - y).pow(2).sum().item()    if t % 100 == 99:        print(t, loss)    # Backprop to compute gradients of w1 and w2 with respect to loss    grad_y_pred = 2.0 * (y_pred - y)    grad_w2 = h_relu.t().mm(grad_y_pred)    grad_h_relu = grad_y_pred.mm(w2.t())    grad_h = grad_h_relu.clone()    grad_h[h &lt; 0] = 0    grad_w1 = x.t().mm(grad_h)    # Update weights using gradient descent    w1 -= learning_rate * grad_w1    w2 -= learning_rate * grad_w2</code></pre><p>2.1torch.device(‘cpu’/‘cuda’)</p><blockquote><p>将torch.Tensor分配到的设备的对象</p></blockquote><p>2.2torch.mm(input,mat2,out=None)</p><blockquote><p>对矩阵input和mat2执行矩阵乘法，返回结果矩阵</p></blockquote><p>2.3torch.clamp(input,min,max,out=None)-&gt;Tensor</p><blockquote><p>input:输入张量；min：限制范围下限；max：上限；out：输出张量</p></blockquote><h3 id="3-Autograd"><a href="#3-Autograd" class="headerlink" title="3.Autograd"></a>3.Autograd</h3><p>[^针对大型网络而言，手动实现前向和后向传递非常麻烦，使用autograd自动计算神经网络中的反向传递。pytorch中的autograd软件包完全提供了此功能，前向传递定义一个计算图；节点为张量，边为输入张量产生输出张量的函数，接着就可以通过该图进行反向传播，可以轻松计算梯度。if x:Tensor,x.requires_grad=True,x.grad是另一个Tensor。]: </p><blockquote><p>不需要手动通过网络实现反向传递，使用Pytorch Tensor和autograd来实现两层网络。</p></blockquote><pre><code># -*- coding: utf-8 -*-import torchdtype = torch.floatdevice = torch.device("cpu")# device = torch.device("cuda:0") # Uncomment this to run on GPU# N is batch size; D_in is input dimension;# H is hidden dimension; D_out is output dimension.N, D_in, H, D_out = 64, 1000, 100, 10# Create random Tensors to hold input and outputs.# Setting requires_grad=False indicates that we do not need to compute gradients# with respect to these Tensors during the backward pass.x = torch.randn(N, D_in, device=device, dtype=dtype)y = torch.randn(N, D_out, device=device, dtype=dtype)# Create random Tensors for weights.# Setting requires_grad=True indicates that we want to compute gradients with# respect to these Tensors during the backward pass.w1 = torch.randn(D_in, H, device=device, dtype=dtype, requires_grad=True)w2 = torch.randn(H, D_out, device=device, dtype=dtype, requires_grad=True)learning_rate = 1e-6for t in range(500):    # Forward pass: compute predicted y using operations on Tensors; these    # are exactly the same operations we used to compute the forward pass using    # Tensors, but we do not need to keep references to intermediate values since    # we are not implementing the backward pass by hand.    y_pred = x.mm(w1).clamp(min=0).mm(w2)    # Compute and print loss using operations on Tensors.    # Now loss is a Tensor of shape (1,)    # loss.item() gets the scalar value held in the loss.    loss = (y_pred - y).pow(2).sum()    if t % 100 == 99:        print(t, loss.item())    # Use autograd to compute the backward pass. This call will compute the    # gradient of loss with respect to all Tensors with requires_grad=True.    # After this call w1.grad and w2.grad will be Tensors holding the gradient    # of the loss with respect to w1 and w2 respectively.    loss.backward()    # Manually update weights using gradient descent. Wrap in torch.no_grad()    # because weights have requires_grad=True, but we don't need to track this    # in autograd.    # An alternative way is to operate on weight.data and weight.grad.data.    # Recall that tensor.data gives a tensor that shares the storage with    # tensor, but doesn't track history.    # You can also use torch.optim.SGD to achieve this.    with torch.no_grad():        w1 -= learning_rate * w1.grad        w2 -= learning_rate * w2.grad        # Manually zero the gradients after updating weights        w1.grad.zero_()        w2.grad.zero_()</code></pre><p>3.1</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Attention is all your need</title>
      <link href="/2020/07/15/attention-is-all-your-need/"/>
      <url>/2020/07/15/attention-is-all-your-need/</url>
      
        <content type="html"><![CDATA[<h3 id="Expanding-knowledge"><a href="#Expanding-knowledge" class="headerlink" title="Expanding  knowledge"></a><strong>Expanding  knowledge</strong></h3><blockquote><p>1.RNN(Recurrent Neural Network)循环神经网络：为了能更好的处理前后相关的sequence信息提出了RNN。假设该网络在输入为xt，隐藏层为st，输出为ot，前提下，st的值不仅取决于xt，还取决于st-1</p><p>2.CNN(Conventional Neural Network)卷积神经网络</p><p>3.LSTM长短时记忆（Long Short Time Memory)：</p><p>1.处理和预测时间序列中间隔和延迟相对较长的重要事件（在词汇预测中如果关联词相差较远，RNN就会出现“梯度消失”的问题</p><p>2.三种门：遗忘门（丢弃的信息）、输入门（新加入的信息）、输出门（输出的信息）</p></blockquote><p><strong>attention机制</strong></p><p>与RNN,CNN不同，完全采用的是attention机制，具有更强的的并行性、节约了训练的时间</p><p><strong>Result</strong></p><p>Transformer模型采用的训练结果比最好结果（English-to-French modle)中提升了两个蓝度。</p><h3 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h3><p>基础是Extended Neural GPU,ByteNet,ConvS2S,它们中两个词汇之间的依赖关系与两者之间的距离反相关，这样如果两个词汇的距离太远它们的依赖性就很难体现。Transformer模型针对这种缺陷提出了Multi-Head Attention，Transformer模型没有使用RNN,CNN，它全部使用了attention机制对整个机制进行监控。</p><h3 id="Model-Architecture"><a href="#Model-Architecture" class="headerlink" title="Model Architecture"></a>Model Architecture</h3><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200716234419464.png" alt="image-20200716234419464"></p><blockquote><p><strong>basic knowledge</strong></p><ol><li><p>Embedding：引用one-hot方法词向量会很高维而且稀疏，使用Emedding更能找出词向量的相似性，这样就可以进行降维操作。计算嵌入矩阵前首先确定潜在因子，将个别单词用潜在因子组成的向量进行表示，其他单词可以用矩阵中向量的索引表示，探索具有相似性的词语，利用降维技术对词语进行相似性可视化。</p></li><li><p>positional encoding</p><p>对位置不敏感的模型（模型的输出不随着文本数据顺序的改变而改变）分为两类，Sinusoidal Positional Encoding（相对）和Learned Positional Encoding.（绝对）</p><p>[^绝对是对不同位置随机初始化一个position embedding,相对位置向量：用正余弦函数分别表示绝对位置，然后用乘积表示绝对位置，complex embedding使用复数域上连续函数来编码词在不同位置的表示。]: </p></li></ol></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deep-learning </tag>
            
            <tag> language model </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>deep learning-Wuenda</title>
      <link href="/2020/07/07/deep-learning-wuenda/"/>
      <url>/2020/07/07/deep-learning-wuenda/</url>
      
        <content type="html"><![CDATA[<h3 id="4-1多功能"><a href="#4-1多功能" class="headerlink" title="4-1多功能"></a>4-1多功能</h3><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200709194136749.png" alt="image-20200709194136749"></h3><p><strong>note</strong></p><ul><li><p>n=number of features</p></li><li><p>x(i)=input of ith training example</p></li><li><p>x(i)j=value of j feature in ith training example</p><p><strong>假设函数</strong></p><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200709195313024.png" alt="image-20200709195313024"></p><p>[^默认x0=1]: </p></li></ul><p>  <img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200709200300679.png" alt="image-20200709200300679"></p><p>特征缩放</p><p>​        -多个特征值所在的范围都在相近的范围内，此时梯度下降算法就会更快地收敛，特征值在-1/3-1/3之间较好，过大过小都不好</p><p><strong>均值归一化</strong></p><p>​        <img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200709201143531.png" alt="image-20200709201143531"></p><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200709201212057.png" alt="image-20200709201212057"></p><p>代价函数：<img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200709201843971.png" alt="image-20200709201843971"></p><h3 id="4-5多项式回归"><a href="#4-5多项式回归" class="headerlink" title="4-5多项式回归"></a><strong>4-5多项式回归</strong></h3><p>在多个参数的代价函数中，要分别对各个参数求偏导，分别设为零。</p><p>if 斯塔为实数而非向量，那么转化为二次函数的求最值</p><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200710083840836.png" alt="image-20200710083840836"></p><h6 id="Gradient-Descent-vs-Normal-Equation"><a href="#Gradient-Descent-vs-Normal-Equation" class="headerlink" title="Gradient Descent vs Normal Equation"></a><strong>Gradient Descent vs Normal Equation</strong></h6><p>Gradient Descent需要不断修正学习率α，需要迭代，在n（特征量的数量）很大的情况下也能很好的工作。</p><p>Normal Equation不需要修正学习率，需要计算XtX,在n很大的情况下时间复杂度为n³，费时</p><blockquote><p>如果矩阵不可逆（singular/degenerate)，使用pinv（X’<em>X)</em>X’*Y也可求出矩阵的逆</p><p>也可以使用正则化或者删除一些特征向量</p></blockquote><p><strong>overfitting</strong>(高方差)：模型过多数据集过少</p><p>泛化能力：训练得到的模型适应新训练集的能力。</p><p>出现过拟合解决的方法：</p><ul><li><p>Reduce number of features.</p><p> -保留舍弃</p><p> -选择适当的模型（model  selection algorithm)</p></li><li><p>正则化(Regulation)</p><p>-线性回归的正则化</p><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200711173321699.png" alt="image-20200711173321699"></p></li></ul><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200711175549803.png" alt="image-20200711175549803"></p><p>​            <img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200711175628518.png" alt="image-20200711175628518"></p><p>[^if X不可逆则选用prinv函数]: </p><p>​        -logistic回归的正则化</p><p>​        多项式的参数的代价函数，会导致模型过于复杂，出现过拟合</p><p>​            对各个参数分别求偏导</p><h3 id="8-1神经网络（Neural-Network"><a href="#8-1神经网络（Neural-Network" class="headerlink" title="8-1神经网络（Neural Network)"></a>8-1神经网络（Neural Network)</h3><h3 id="p43-8-1"><a href="#p43-8-1" class="headerlink" title="p43 8-1"></a>p43 8-1</h3><p>非线性回归</p><p>n过大时计算量过大</p><p>神经元与大脑</p><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200711184448515.png" alt="image-20200711184448515"></p><p>[^上标表示与第几层有关，下标表示与第几个神经元有关]: </p><p>神经元层分为三个：输入层、隐藏层（好多层）、输出层</p><p>XOR：异或：不同为一</p><p>NXOR：同或:相同为一</p><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200713160945825.png" alt="image-20200713160945825"></p><p>（NOT x1)AND(NOT x2)</p><p>可能有很多隐藏层</p><p>每层对输入进行不同的处理，最后送入输出层</p><p>多元分类</p><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200713162834051.png" alt="image-20200713162834051"></p><p>L表示层数</p><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200713163115839.png" alt="image-20200713163115839"></p><p>[^h\theta(x)是k维向量，(h\theta(x))$i_d$表示神经网络输出向量的第i个元素]: </p><p><strong>Gradient computation</strong></p><p>1.前向传播</p><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200713164907850.png" alt="image-20200713164907850"></p><p>[^a(1)为第一层的激活值，g为sigmod激活函数，计算第二层的激活函数]: </p><hr><p><strong>Backporpagation algorithm</strong></p><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200719182147968.png" alt=""></p><p>反向传播就是反过来计算误差值</p><h3 id="总结神经网络"><a href="#总结神经网络" class="headerlink" title="总结神经网络"></a>总结神经网络</h3><p><strong>1.确定架构</strong></p><p>就是选择神经元之间的连接方法</p><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200719212007267.png" alt="image-20200719212007267"></p><p><strong>2.训练神经网络</strong></p><ul><li>确定初始化权值</li><li>使用正向传播算法为每个x（i）计算出h(x(i))</li><li>使用代码计算出代价J（Θ）</li><li>使用反向传播计算出每个偏导数</li><li>使用梯度检测确定反向传播计算的偏导数和用数值计算的估计值之间的误差，最后确定算法是正确的</li></ul><p>使用最优化算法来确定代价函数的最小值</p><h4 id="梯度代价函数"><a href="#梯度代价函数" class="headerlink" title="梯度代价函数"></a><strong>梯度代价函数</strong></h4><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200720084214076.png" alt="image-20200720084214076"></p><p>通过求偏导数无限接近于代价较小的点</p><h3 id="10-2评估假设"><a href="#10-2评估假设" class="headerlink" title="10-2评估假设"></a>10-2评估假设</h3><p>将数据集70%用于训练集，30%用于测试集。</p><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200720084824398.png" alt="image-20200720084824398"></p><h4 id="Model-Selection"><a href="#Model-Selection" class="headerlink" title="Model Selection"></a><strong>Model Selection</strong></h4><p><strong>Evaluating your hypothesis</strong></p><p>6:2:2(训练集：交叉验证集：测试集)</p><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200720090804228.png" alt="image-20200720090804228"></p><p><strong>Model selection</strong></p><p>用验证集或者交叉验证集来选择模型，评估泛化误差（防止过拟合）</p><p>ps：与前面的验证集不同，前面的验证集只能选择合适的模型，无法评估泛化能力。</p><p><strong>10-4偏差与方差</strong>（欠拟合与过拟合）</p><blockquote><p>偏差：预测值的期望与真实值之间的差距，偏差越大，越偏离真实数据</p><p>方差：描述预测值的变化范围，离散程度</p></blockquote><p>训练集和交叉验证集的代价计算公式</p><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200721103256057.png" alt="image-20200721103256057"></p><p>两种误差的变化趋势</p><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200721103150199.png" alt="image-20200721103150199"></p><p><strong>10-5结合正则化</strong></p><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200721103958207.png" alt="image-20200721103958207"></p><p>选择使代价最小的λ值</p><h3 id="10-6学习曲线"><a href="#10-6学习曲线" class="headerlink" title="10-6学习曲线"></a>10-6学习曲线</h3><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200721113346897.png" alt="image-20200721113346897"></p><p><img src="C:/Users/89582/AppData/Roaming/Typora/typora-user-images/image-20200721162202446.png" alt="image-20200721162202446"></p><h3 id="11-1确定执行的优先级"><a href="#11-1确定执行的优先级" class="headerlink" title="11-1确定执行的优先级"></a>11-1确定执行的优先级</h3><p><strong>example</strong>：垃圾邮件分类器</p><h3 id="11-2误差分析"><a href="#11-2误差分析" class="headerlink" title="11-2误差分析"></a>11-2误差分析</h3><blockquote><ol><li>建立一个简单的模型</li><li>画出学习曲线以及分析</li><li>误差分析（找出需要特殊处理的样本）在交叉验证集上进行</li></ol></blockquote><h3 id="11-3不对称分类的误差分析"><a href="#11-3不对称分类的误差分析" class="headerlink" title="11-3不对称分类的误差分析"></a>11-3不对称分类的误差分析</h3><p>Cancer classification example</p><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200721223025519.png" alt="image-20200721223025519"></p><p>precision表示交叉部分占所有预测值的比例</p><p>recall表示交叉部分占总的正例的比例</p><h3 id="11-5机器学习数据"><a href="#11-5机器学习数据" class="headerlink" title="11-5机器学习数据"></a>11-5机器学习数据</h3><h3 id="12-1优化数据"><a href="#12-1优化数据" class="headerlink" title="12-1优化数据"></a>12-1优化数据</h3><h4 id="支持向量机"><a href="#支持向量机" class="headerlink" title="支持向量机"></a>支持向量机</h4><ol><li><p>logistic回归</p><p><img src="C:/Users/89582/AppData/Roaming/Typora/typora-user-images/image-20200722153941516.png" alt="image-20200722153941516"></p><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200722154423535.png" alt="image-20200722154423535"></p></li></ol><blockquote><p>SVM：Support Vector Machine,向量机：用supervised learning对数据进行二元分类的广义分类器</p></blockquote><h4 id="12-3大间隔分类器"><a href="#12-3大间隔分类器" class="headerlink" title="12-3大间隔分类器"></a>12-3大间隔分类器</h4><blockquote><p><strong>向量内积</strong></p><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200722161211108.png" alt="image-20200722161211108">        </p></blockquote><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200723113904597.png" alt="image-20200723113904597"></p><p>为了达到向量机优化算法的目的，要使参数θ的取值范围尽可能小，为了保持p*θ&gt;=1（正样本）恒成立，p的取值应该尽可能大，p为样本点在向量参数θ上的投影，显然右图的投影长度更长。（即正负样本与分类线之间的距离更大）</p><h3 id="12-核函数"><a href="#12-核函数" class="headerlink" title="12-*核函数"></a>12-*核函数</h3><h5 id="非线性函数的决策边界"><a href="#非线性函数的决策边界" class="headerlink" title="非线性函数的决策边界"></a>非线性函数的决策边界</h5><p>[^要确定计算边界要构造一个很复杂的多项式函数θ，但是过于复杂，就提出核函数]: </p><p><strong>高斯核函数</strong></p><p>[^||x-l(1)||是欧式距离]: </p><p>1.选择标记点</p><p>2.用高斯核函数计算f值</p><p>3.代入预测函数计算结果是1or0</p><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200723163128297.png" alt="image-20200723163128297"></p><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200723162655307.png" alt="image-20200723162655307"></p><p>** how to choose landmarks**：直接将训练样本点的位置作为标记点的位置</p><p>计算fi=similarity(x,l^i)</p><p><strong>SVM parameters</strong></p><h5 id="SVM应用"><a href="#SVM应用" class="headerlink" title="*SVM应用 *"></a><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200723214650858.png" alt="image-20200723214650858">*<em>SVM应用 *</em></h5><p>1.选择内核参数C和内核</p><p>[^没有内核就是线性内函数，通过计算参数不等式来确定取值]: </p><h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><p><a href="https://www.bilibili.com/video/BV164411b7dx?p=76" target="_blank" rel="noopener">https://www.bilibili.com/video/BV164411b7dx?p=76</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deep-learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MNER-Multimodal Entity Span Detection</title>
      <link href="/2020/07/06/improving-multimodal-named-entity-recognition-via-entity-spandetection-with-unified-multimodal-transformer/"/>
      <url>/2020/07/06/improving-multimodal-named-entity-recognition-via-entity-spandetection-with-unified-multimodal-transformer/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>Named-entity recognition</strong> (NER) (also known as <strong>entity identification</strong>, <strong>entity chunking</strong> and <strong>entity extraction</strong>) is a subtask of <a href="https://encyclopedia.thefreedictionary.com/Information+extraction" target="_blank" rel="noopener">information extraction</a> that seeks to locate and classify named entities in text into pre-defined categories such as the names of persons, organizations, locations, expressions of times, quantities, monetary values, percentages, etc.</p></blockquote><h4 id="A-example-of-NER"><a href="#A-example-of-NER" class="headerlink" title="A example of NER:"></a>A example of NER:</h4><table><thead><tr><th>Jim bought 300 shares of Acme Corp. in 2006.</th></tr></thead><tbody><tr><td>[Jim]Person bought 300 shares of [Acme Corp.]Organization in [2006]Time.</td></tr></tbody></table><p><strong>level</strong>:ACL2020</p><p><strong>author:</strong>Jianfei Yu</p><p><strong>keywords:</strong>MNER,Entity Span Detection</p><h2 id="Qusetions"><a href="#Qusetions" class="headerlink" title="##Qusetions"></a>##Qusetions</h2><blockquote><h3 id="MNER-drawbacks"><a href="#MNER-drawbacks" class="headerlink" title="MNER drawbacks"></a>MNER drawbacks</h3></blockquote><ul><li><p>the words are insensitive to the visual context</p><p>现有的方法侧重模态间交互进行建模，因为单词的隐藏层表示仍然基于文本上下文，对视觉上下文不敏感。</p><p>忽略了合并视觉信息的误差。关联的图片信息只包括句子中的一两个实体，不涉及其他实体，这样会使其他实体无法识别。</p></li><li><p>most of the words ignore the bias brought by the visual context</p></li></ul><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h3 id="Strategy"><a href="#Strategy" class="headerlink" title="Strategy:"></a>Strategy:</h3><p>1.main strategy:多通道交互模块（MMI）：standard Transformer layer+cross-model attention mechanism</p><p>2.auxiliary task:leverage purely text-based entity span detection</p><p>Consequence:</p><p>achieves the new state-of-the-artperformance on two benchmark datasets.</p><h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><p> Overall Architecture of Our Unified Multimodal Transformer.</p><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200708184644333.png" alt="image-20200708184644333"></p><h3 id="Transformer模型"><a href="#Transformer模型" class="headerlink" title="Transformer模型"></a>Transformer模型</h3><h5 id="采用encoder-decoder模型。与Attention相似"><a href="#采用encoder-decoder模型。与Attention相似" class="headerlink" title="采用encoder-decoder模型。与Attention相似"></a>采用encoder-decoder模型。与Attention相似</h5><p><img src="C:/Users/89582/AppData/Roaming/Typora/typora-user-images/image-20200708094459080.png" alt="image-20200708094459080"></p><p><strong>基本内部结构</strong>如图所示，进入Encoder层前先将单词进行Emebedding操作，self-attention操作后送入前馈神经网络，也可并行进行self-attention和前馈神经网络。</p><p><img src="C:/Users/89582/AppData/Roaming/Typora/typora-user-images/image-20200708095052382.png" alt="image-20200708095052382"></p><h4 id="BERT"><a href="#BERT" class="headerlink" title="BERT"></a><strong>BERT</strong></h4><ul><li><p>全称Bidirectional Encoder Representation from Transformers，即双向Transformer的Encoder</p></li><li><p><strong>创新点：</strong>pre-train：Masked LM+Next Sentence Prediction</p><p><strong>MLM（Masked LM)</strong>可以理解为完形填空，作者会随机mask每一个句子中15%的词，用其上下文来做预测，例如：<code>my dog is hairy → my dog is [MASK]</code></p><p>此处将hairy进行了mask处理，然后采用非监督学习的方法预测mask位置的词是什么，但是该方法有一个问题，因为是mask15%的词，其数量已经很高了，这样就会导致某些词在fine-tuning阶段从未见过，为了解决这个问题，作者做了如下的处理：</p><ul><li>80%的时间是采用[mask]，my dog is hairy → my dog is [MASK]</li><li>10%的时间是随机取一个词来代替mask的词，my dog is hairy -&gt; my dog is apple</li><li>10%的时间保持不变，my dog is hairy -&gt; my dog is hairy</li></ul><p>那么为啥要以一定的概率使用随机词呢？这是因为transformer要保持对每个输入token分布式的表征，否则Transformer很可能会记住这个[MASK]就是”hairy”。至于使用随机词带来的负面影响，文章中解释说,所有其他的token(即非”hairy”的token)共享15%*10% = 1.5%的概率，其影响是可以忽略不计的。Transformer全局的可视，又增加了信息的获取，但是不让模型获取全量信息。<br>注意：</p><ul><li>有参数dupe_factor决定数据duplicate的次数。</li><li>其中，create_instance_from_document函数，是构造了一个sentence-pair的样本。对每一句，先生成[CLS]+A+[SEP]+B+[SEP]，有长（0.9）有短（0.1），再加上mask，然后做成样本类object。</li><li>create_masked_lm_predictions函数返回的tokens是已经被遮挡词替换之后的tokens</li><li>masked_lm_labels则是遮挡词对应位置真实的label。</li></ul><h4 id="Next-Sentence-Prediction"><a href="#Next-Sentence-Prediction" class="headerlink" title="Next Sentence Prediction"></a>Next Sentence Prediction</h4><p>选择一些句子对A与B，其中50%的数据B是A的下一条句子，剩余50%的数据B是语料库中随机选择的，学习其中的相关性，添加这样的预训练的目的是目前很多NLP的任务比如QA和NLI都需要理解两个句子之间的关系，从而能让预训练的模型更好的适应这样的任务。<br>个人理解：</p><ul><li>Bert先是用Mask来提高视野范围的信息获取量，增加duplicate再随机Mask，这样跟RNN类方法依次训练预测没什么区别了除了mask不同位置外；</li><li>全局视野极大地降低了学习的难度，然后再用A+B/C来作为样本，这样每条样本都有50%的概率看到一半左右的噪声；</li><li>但直接学习Mask A+B/C是没法学习的，因为不知道哪些是噪声，所以又加上next_sentence预测任务，与MLM同时进行训练，这样用next来辅助模型对噪声/非噪声的辨识，用MLM来完成语义的大部分的学习。</li></ul></li></ul><h4 id="positional-Encoding"><a href="#positional-Encoding" class="headerlink" title="positional Encoding"></a><strong>positional Encoding</strong></h4><p>Transformer中缺少一种解释单词顺序的方法，positional Encoding维度和embedding一样，可以通过它计算出任意两个词之间的距离，最终将它和Embedding相加输入下一层即可</p><h4 id="self-attention"><a href="#self-attention" class="headerlink" title="self-attention"></a><strong>self-attention</strong></h4><ol><li>定义三个向量：Query,Key,Value(三个矩阵是embedding向量与三个随机矩阵相乘的结果，eg：维度（64，128)，注意第二个维度与embedding向量的维度相同</li><li>scores=Q*K将结果除以1提到的第一个维度的开方得到的是softmax</li></ol><p>该词代表的是每个词对于当前位置的词的相关性大小。将value和softmax相乘得到的各个结果进行相加得到的结果即为self-attention在当前节点的值</p><p><strong>Resnet</strong></p><p>​    ResNet是一种残差网络,网络越深，获取的信息越多，特征也越丰富。但是根据实验表明，随着网络的加深，优化效果反而越差，测试数据和训练数据的准确率反而降低了。这是由于网络的加深会造成梯度爆炸和梯度消失的问题。</p><p><img src="C:/Users/89582/AppData/Roaming/Typora/typora-user-images/image-20200709111035572.png" alt="image-20200709111035572"></p><p>​                                                           Multimodal Interaction (MMI) Module.</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 论文泛读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MNER </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PPT Useful Plugin</title>
      <link href="/2020/05/11/ruan-jian-gong-ju/ppt/ppt-useful-plugin/"/>
      <url>/2020/05/11/ruan-jian-gong-ju/ppt/ppt-useful-plugin/</url>
      
        <content type="html"><![CDATA[<h2 id="1、PPT美化大师"><a href="#1、PPT美化大师" class="headerlink" title="1、PPT美化大师"></a>1、<a href="http://meihua.docer.com/" target="_blank" rel="noopener">PPT美化大师</a></h2><p>“让制作专业精美PPT变得简单”“让不会做PPT的人，也能做好PPT”作为一款由wps的开发公司金山软件开发的PPT插件，自然来头不小，也不负大师之名。</p><h3 id="1-1、内容规划-生成模板"><a href="#1-1、内容规划-生成模板" class="headerlink" title="1.1、内容规划 生成模板"></a>1.1、内容规划 生成模板</h3><p>在美化大师工具栏选择新建一个PPT，选择美化大师中的“<font color="red">内容规划</font>”，输入PPT所需的大标题和一二级目录标题，并选择相应合适的“风格”，即可自动生成一份PPT模板。</p><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200514092132264.png" alt=""></p><p>对模板背景不满意，还可以对其进行更换，选择自己喜欢的模板。</p><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200514092147169.png" alt=""></p><h3 id="1-2、模板在线选择"><a href="#1-2、模板在线选择" class="headerlink" title="1.2、模板在线选择"></a>1.2、模板在线选择</h3><p>在美化大师工具栏下选择<font color="red">资源广场</font>，里面有海量免费和收费的高质量PPT模板，可以在线购买，直接导入PPT，类似于wps的在线模板</p><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200514092201791.png" alt=""></p><h3 id="1-3、图片、图形、幻灯片素材"><a href="#1-3、图片、图形、幻灯片素材" class="headerlink" title="1.3、图片、图形、幻灯片素材"></a>1.3、图片、图形、幻灯片素材</h3><p>还在为找不好看的图片发愁么，美化大师里面提供大量各行各业的图片素材，而且几乎都是没有背景的，可以一键运用</p><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200514092216002.png" alt=""></p><h3 id="1-4、导出各类格式（拼图、全图、图片、视频）"><a href="#1-4、导出各类格式（拼图、全图、图片、视频）" class="headerlink" title="1.4、导出各类格式（拼图、全图、图片、视频）"></a>1.4、导出各类格式（拼图、全图、图片、视频）</h3><p>美化大师提供PPT拼图，可以讲PPT以拼图形式直接呈现出来，一目了然。</p><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200514092234474.png" alt=""></p><h3 id="1-5、批量删除（动画、切换页-备注）"><a href="#1-5、批量删除（动画、切换页-备注）" class="headerlink" title="1.5、批量删除（动画、切换页 备注）"></a>1.5、批量删除（动画、切换页 备注）</h3><p>当我们制作了一份PPT，里面有动画但是临时有演示要求说不需要动画，我们就可以这样一件删除所有动画，另外，还可以删除所有页切换或者备注</p><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200514092248221.png" alt=""></p><h3 id="1-6、收藏喜欢的幻灯片、图形、图片"><a href="#1-6、收藏喜欢的幻灯片、图形、图片" class="headerlink" title="1.6、收藏喜欢的幻灯片、图形、图片"></a>1.6、收藏喜欢的幻灯片、图形、图片</h3><p>网上下载了一份很漂亮的PPT模板，里面有些好看的图标素材、图片素材、或者幻灯片想要保存以便日后再用，美化大师提供了在线收藏的功能，对他们进行收藏，就不用保存到自己电脑本地要用时还得找好久或者误删了。</p><h2 id="2、onekey（OK）插件"><a href="#2、onekey（OK）插件" class="headerlink" title="2、onekey（OK）插件"></a>2、onekey（OK）插件</h2><p>onekey是由一位大师@只为设计开发完成的（收下我的小膝盖），从只有简单的几个功能，发展到现在已经有一百四五十个功能。功能涵盖形状、调色、图片、演示、辅助等方面。在图片形状处理方面尤为突出，这里主要为大家简单介绍一下，更多强大到可怕的功能，官方有详细的教程需要大家自己摸索了，</p><h3 id="2-1、一键转图"><a href="#2-1、一键转图" class="headerlink" title="2.1、一键转图"></a>2.1、一键转图</h3><p>OK插件的一键转图功能非常方便实用，如果我们要讲一个做好的图表、不能嵌入PPT的字体、形状组合、处理过的图片转成一张图片，通常的操作是保存到电脑为图片再插入，过程较为繁琐，有了这个功能，可以在PPT里面原位直接转为图片，方便实用。</p><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200514092325222.png" alt=""></p><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200514092338325.png" alt=""></p><h3 id="2-2、强大的图片处理"><a href="#2-2、强大的图片处理" class="headerlink" title="2.2、强大的图片处理"></a>2.2、强大的图片处理</h3><p>ok插件强大的图片处理功能好用到爆，提供了正片叠底、滤色、柔光、反相，图片色相、图片马赛克、图片分割、形状吸附到路径、形状取图片像素、多页统一、特殊选中等等功能。例：一键虚化、一键马赛克</p><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200514092354557.png" alt=""></p><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200514092410789.png" alt=""></p><h3 id="2-3、强大的形状处理"><a href="#2-3、强大的形状处理" class="headerlink" title="2.3、强大的形状处理"></a>2.3、强大的形状处理</h3><p>OK插件提供了强大的形状处理功能，覆盖导入、去除、复制、文本等等，例如可以导入EMF(一种PPT支持的矢量图片文件格式，在PPT中可以通过取消组合来得到矢量形状)、一键拆分段落</p><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200514092430143.png" alt=""></p><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200514092442500.png" alt=""></p><p>另外，OK插件还有颜色处理、三维处理等高大上功能，总之，OK插件是一款非常强大的PPT插件，官方也出了很多相关教程，是一款非常专业好用的PPT神器。</p><h2 id="3、口袋动画PA"><a href="#3、口袋动画PA" class="headerlink" title="3、口袋动画PA"></a>3、<a href="http://www.papocket.com/" target="_blank" rel="noopener">口袋动画PA</a></h2><p>口袋动画(Pocket Animation,简称PA)是由大安工作室(作者:安少)独立开发出来的一款PowerPoint动画插件，顾名思义就是简化PPT动画设计过程、完善PPT动画相关功能。下面举例介绍几种常用功能</p><h3 id="3-1、动画删除"><a href="#3-1、动画删除" class="headerlink" title="3.1、动画删除"></a>3.1、动画删除</h3><p>PA插件可以一键去除对象动画、幻灯片动画、整个PPT文档动画，这对于做了很多动画后领导临时要求全部删除动画的人是福音，简直节省效率神器</p><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200514092458078.png" alt=""></p><h3 id="3-2、动画序列"><a href="#3-2、动画序列" class="headerlink" title="3.2、动画序列"></a>3.2、动画序列</h3><p>对于经常要设置相同动画序列来说，这个功能超级实用，例如可以批量设置动画延迟时间，包括固定延迟、随机延迟、公式延迟等，再也不用一个一个区重复操作了。快速制作动画，就试试PA插件的这个功能吧</p><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200514092515964.png" alt=""></p><h3 id="3-3、颜色替换"><a href="#3-3、颜色替换" class="headerlink" title="3.3、颜色替换"></a>3.3、颜色替换</h3><p>PA的颜色替换功能可谓是十足的福利啊，可以将整个PPT的颜色由一种全部替换为另外一种，一键更改PPT的配色，简单又实用，无论是表格、图表，还是文本线条，它都能一键更改，再也不用一个一个改配色了，有它足以。</p><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200514092530555.png" alt=""></p><h3 id="3-4、动画库"><a href="#3-4、动画库" class="headerlink" title="3.4、动画库"></a>3.4、动画库</h3><p>PA提供了一些大神为我们预先设计好的动画效果，我们可以在制作PPT的时候随时调用，省去了大量制作动画的时间。对于喜欢PPT动画的人来说，PA插件绝对是一款好用的神器。</p><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200514092545705.png" alt=""></p><h3 id="3-5、高级动画设计"><a href="#3-5、高级动画设计" class="headerlink" title="3.5、高级动画设计"></a>3.5、高级动画设计</h3><p>PA动画为我们的PPT动画设计带来了更多设计灵感和想象空间，它提供了众多强大的动画设计功能，简化了PPT的动画制作流程，提供了更多原有PPT很难做到的动画功能，使我们的动画制作出来更快、更和谐。</p><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200514092559627.png" alt=""></p><h2 id="4、-iSlide"><a href="#4、-iSlide" class="headerlink" title="4、 iSlide"></a>4、 <a href="https://www.islide.cc/download" target="_blank" rel="noopener">iSlide</a></h2><p>iSlide是升级版的Nordri Tools，在Nordri Tools原来的工具属性功能外，增加了更多的素材，下面是iSlide的功能一栏，只能也只做简单介绍</p><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200514092617634.png" alt=""></p><h3 id="4-1、-一键优化"><a href="#4-1、-一键优化" class="headerlink" title="4.1、 一键优化"></a>4.1、 一键优化</h3><p>iSlide也提供了一键优化的功能，包括统一字体和统一段落，为设计提供了便捷快速的操作。</p><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200514092639364.png" alt=""></p><h3 id="4-2、-素材资源"><a href="#4-2、-素材资源" class="headerlink" title="4.2、 素材资源"></a>4.2、 素材资源</h3><p>iSlide相对于Nordri Tools最大的特点就是增加了大量的素材资源，包括图标库、色彩库、图示库、以及智能图表。</p><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200514092708595.png" alt=""></p><h3 id="4-3、智能图表"><a href="#4-3、智能图表" class="headerlink" title="4.3、智能图表"></a>4.3、智能图表</h3><p>在这里要为大家重要讲解一下智能图表功能。iSlide提供了众多可视化的图表，更强大的事这些图表可以自由编辑和调整，数值颜色图标等都可以编辑替换。厉害了我的智能图表。<img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200514092804307.png" alt=""></p><p><strong>转载</strong>：<a href="https://www.jianshu.com/p/c986f4b09b93" target="_blank" rel="noopener">https://www.jianshu.com/p/c986f4b09b93</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Window CommandLine</title>
      <link href="/2020/04/27/ruan-jian-gong-ju/window/window-commandline/"/>
      <url>/2020/04/27/ruan-jian-gong-ju/window/window-commandline/</url>
      
        <content type="html"><![CDATA[<h2 id="1-PowerShell"><a href="#1-PowerShell" class="headerlink" title="1. PowerShell"></a>1. PowerShell</h2><pre class=" language-powershell"><code class="language-powershell"><span class="token comment" spellcheck="true">#  查看powershell 版本</span><span class="token function">get-host</span><span class="token variable">$host</span><span class="token punctuation">.</span>version<span class="token comment" spellcheck="true">#  新建目录</span><span class="token comment" spellcheck="true">#当前目录新建文件</span><span class="token function">new-item</span> FILENAME<span class="token punctuation">.</span>xxx <span class="token operator">-</span><span class="token function">type</span> file<span class="token comment" spellcheck="true">#当前目录新建文件夹</span><span class="token function">new-item</span> DIRECTORYNAME <span class="token operator">-</span><span class="token function">type</span> directory<span class="token comment" spellcheck="true">#在指定目录新建</span><span class="token function">new-item</span> TARGETDIR FILENAME<span class="token punctuation">.</span>xxx <span class="token operator">-</span><span class="token function">type</span> file<span class="token comment" spellcheck="true">#  重命名</span><span class="token comment" spellcheck="true">#把 C:/Scripts/Test.txt 重命名为 C:/Scripts/New_Name.txt:</span><span class="token function">Rename-Item</span> c:<span class="token operator">/</span>scripts<span class="token operator">/</span>Test<span class="token punctuation">.</span>txt new_name<span class="token punctuation">.</span>txt<span class="token comment" spellcheck="true">#  移动文件</span><span class="token function">Move-Item</span> c:\scripts\test<span class="token punctuation">.</span>zip c:\testX<span class="token comment" spellcheck="true">#  删除目录/文件</span><span class="token function">remove-item</span> file<span class="token comment" spellcheck="true">#显示文本内容</span><span class="token function">get-content</span> 1<span class="token punctuation">.</span>txt<span class="token comment" spellcheck="true">#罗列系统驱动器</span>get<span class="token operator">-</span>psdriver<span class="token comment" spellcheck="true">#下载文件</span>powershell <span class="token operator">-</span>Command <span class="token string">"(New-Object Net.WebClient).DownloadFile('https://ts', './src/ts')"</span><span class="token comment" spellcheck="true">#支持linux 文件  ls，dir，pwd，cat, more</span><span class="token comment" spellcheck="true"># 中文输出乱码</span>打开控制面板 <span class="token operator">-</span>> Change date<span class="token punctuation">,</span>time<span class="token punctuation">,</span>or number <span class="token operator">-</span>> 打开 “Region” 对话框选择 Administrative 选项卡，点击 change system locale选择</code></pre><h2 id="2-Cmd"><a href="#2-Cmd" class="headerlink" title="2. Cmd"></a>2. Cmd</h2><pre class=" language-shell"><code class="language-shell">where cmd #类似Linux中where 命令find /r 目录名 %变量名 in (匹配模式1,匹配模式2) do 命令for /r 目录名 %i in (匹配模式1,匹配模式2) do @echo %ifor /r TestDir %i in (*) do @echo %i  #将TestDir目录及所有子目录中所有的文件列举出来for /r TestDir %i in (*.txt) do @echo %i  #在TestDir目录所有子目录中找出所有的txt文件for /r TestDir %i in (.txt,.jpg) do @echo %i #找出所有的txt及jpg文件for /r TestDir %i in (test) do @echo %i  #找出所有文件名中包含test的文件Tree   #罗列文件目录</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OperationSystem </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typoro Command</title>
      <link href="/2020/04/26/ruan-jian-gong-ju/hexotypora/typoro-command/"/>
      <url>/2020/04/26/ruan-jian-gong-ju/hexotypora/typoro-command/</url>
      
        <content type="html"><![CDATA[<blockquote><p>​      Typora 是一个 Markdown 文本编辑器，它支持且仅支持 Markdown 语法的文本编辑。在 <a href="https://typora.io/" target="_blank" rel="noopener">Typora 官网</a> 上他们将 Typora 描述为 「A truly <strong>minimal</strong> markdown editor. 」</p></blockquote><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h2><pre class=" language-shell"><code class="language-shell">#1 安装依赖包 sudo apt-get install libapt-pkg-dev  #2 安装、更新 sudo apt-get install apt-transport-httpssudo apt-get update#3 安装Typora源wget -qO - https://typora.io/linux/public-key.asc | sudo apt-key add -sudo add-apt-repository ‘deb https://typora.io/linux ./‘sudo apt-get update#4 安装typora sudo apt-get install typora#首行缩进&emsp;&emsp;春天来了，又到了万物复苏的季节。#任务列表- [ ] 一次性水杯- [x] 西瓜#各种表情链接： https://www.webfx.com/tools/emoji-cheat-sheet/</code></pre><h2 id="2-图片排版"><a href="#2-图片排版" class="headerlink" title="2. 图片排版"></a>2. 图片排版</h2><p><strong>方法一：嵌入HTML代码</strong><br>使用img标签</p><pre class=" language-html"><code class="language-html">&lt;img src="./xxx.png" width = "300" height = "200" alt="图片名称" align=center /><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span> <span class="token punctuation">'</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">='</span><span class="token attr-value"><span class="token property">float</span><span class="token punctuation">:</span>right<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">300</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100</span> px</span><span class="token punctuation">'</span></span><span class="token punctuation">/></span></span>#或者<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图片地址<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300px<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图片说明<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p><strong>方法二：预定义类</strong></p><pre class=" language-html"><code class="language-html">#居中对齐，img间不要换行，否则识别不了<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>half<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图片链接<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图片链接<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图片链接<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span>#左对齐并排<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>figure</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>third<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>figure</span><span class="token punctuation">></span></span></code></pre><h2 id="3-数学公式"><a href="#3-数学公式" class="headerlink" title="3. 数学公式"></a>3. 数学公式</h2><p><strong>开启行内公式</strong>：文件→偏好设置→Markdown，勾选内联公式，重启typora    </p><p><strong>分数，平方</strong></p><table><thead><tr><th align="left">算式</th><th align="left">markdown</th></tr></thead><tbody><tr><td align="left">$\frac{7x+5}{1+y^2}$，$1/2$</td><td align="left">\frac{7x+5}{1+y^2} ,    1/2</td></tr></tbody></table><p><strong>下标</strong></p><table><thead><tr><th align="left">算式</th><th align="left">markdown</th></tr></thead><tbody><tr><td align="left">$z=z_l$ , $z=z^1$</td><td align="left">下标： z=z_l,  上标 z=z^1</td></tr></tbody></table><p><strong>省略号</strong></p><table><thead><tr><th align="left">省略号</th><th align="left">markdown</th></tr></thead><tbody><tr><td align="left">⋯</td><td align="left">\cdots</td></tr></tbody></table><p><strong>开根号</strong></p><table><thead><tr><th align="left">算式</th><th align="left">markdown</th></tr></thead><tbody><tr><td align="left">$\sqrt{2};\sqrt[n]{3}$</td><td align="left">\sqrt{2};\sqrt[n]{3}</td></tr></tbody></table><p><strong>花括号</strong></p><table><thead><tr><th align="left">算式</th><th align="left">markdown</th></tr></thead><tbody><tr><td align="left">$c(u)=\begin{cases} \sqrt\frac{1}{N}，u=0\ \sqrt\frac{2}{N}， u\neq0\end{cases}$</td><td align="left">c(u)=\begin{cases} \sqrt\frac{1}{N}，u=0\ \sqrt\frac{2}{N}， u\neq0\end{cases}     ,花括号</td></tr><tr><td align="left">$a \quad b$</td><td align="left">a \quad b  ,空格</td></tr></tbody></table><p><strong>矢量</strong></p><table><thead><tr><th align="left">算式</th><th align="left">markdown</th></tr></thead><tbody><tr><td align="left">$\vec{a} \cdot \vec{b}=0$</td><td align="left">\vec{a} \cdot \vec{b}=0</td></tr></tbody></table><p><strong>积分</strong></p><table><thead><tr><th align="left">算式</th><th align="left">markdown</th></tr></thead><tbody><tr><td align="left">$\int ^2_3 x^2 {\rm d}x$</td><td align="left">\int ^2_3 x^2 {\rm d}x</td></tr></tbody></table><p><strong>极限</strong></p><table><thead><tr><th align="left">算式</th><th align="left">markdown</th></tr></thead><tbody><tr><td align="left">$\lim_{n\rightarrow+\infty} n$</td><td align="left">\lim_{n\rightarrow+\infty} n</td></tr></tbody></table><p><strong>累加</strong></p><table><thead><tr><th align="left">算式</th><th align="left">markdown</th></tr></thead><tbody><tr><td align="left">$\sum \frac{1}{i^2}$</td><td align="left">\sum \frac{1}{i^2}</td></tr></tbody></table><p><strong>累乘</strong></p><table><thead><tr><th align="left">算式</th><th align="left">markdown</th></tr></thead><tbody><tr><td align="left">$\prod \frac{1}{i^2}$</td><td align="left">\prod \frac{1}{i^2}</td></tr></tbody></table><p><strong>希腊字母</strong></p><table><thead><tr><th align="left">大写</th><th align="left">markdown</th><th align="left">小写</th><th align="left">markdown</th></tr></thead><tbody><tr><td align="left">A</td><td align="left">A</td><td align="left">α</td><td align="left">\alpha</td></tr><tr><td align="left">B</td><td align="left">B</td><td align="left">β</td><td align="left">\beta</td></tr><tr><td align="left">Γ</td><td align="left">\Gamma</td><td align="left">γ</td><td align="left">\gamma</td></tr><tr><td align="left">Δ</td><td align="left">\Delta</td><td align="left">δ</td><td align="left">\delta</td></tr><tr><td align="left">E</td><td align="left">E</td><td align="left">ϵ</td><td align="left">\epsilon</td></tr><tr><td align="left"></td><td align="left"></td><td align="left">ε</td><td align="left">\varepsilon</td></tr><tr><td align="left">Z</td><td align="left">Z</td><td align="left">ζ</td><td align="left">\zeta</td></tr><tr><td align="left">H</td><td align="left">H</td><td align="left">η</td><td align="left">\eta</td></tr><tr><td align="left">Θ</td><td align="left">\Theta</td><td align="left">θ</td><td align="left">\theta</td></tr><tr><td align="left">I</td><td align="left">I</td><td align="left">ι</td><td align="left">\iota</td></tr><tr><td align="left">K</td><td align="left">K</td><td align="left">κ</td><td align="left">\kappa</td></tr><tr><td align="left">Λ</td><td align="left">\Lambda</td><td align="left">λ</td><td align="left">\lambda</td></tr><tr><td align="left">M</td><td align="left">M</td><td align="left">μ</td><td align="left">\mu</td></tr><tr><td align="left">N</td><td align="left">N</td><td align="left">ν</td><td align="left">\nu</td></tr><tr><td align="left">Ξ</td><td align="left">\Xi</td><td align="left">ξ</td><td align="left">\xi</td></tr><tr><td align="left">O</td><td align="left">O</td><td align="left">ο</td><td align="left">\omicron</td></tr><tr><td align="left">Π</td><td align="left">\Pi</td><td align="left">π</td><td align="left">\pi</td></tr><tr><td align="left">P</td><td align="left">P</td><td align="left">ρ</td><td align="left">\rho</td></tr><tr><td align="left">Σ</td><td align="left">\Sigma</td><td align="left">σ</td><td align="left">\sigma</td></tr></tbody></table><table><thead><tr><th align="left">大写</th><th align="left">markdown</th><th align="left">小写</th><th align="left">markdown</th></tr></thead><tbody><tr><td align="left">T</td><td align="left">T</td><td align="left">τ</td><td align="left">\tau</td></tr><tr><td align="left">Υ</td><td align="left">\Upsilon</td><td align="left">υ</td><td align="left">\upsilon</td></tr><tr><td align="left">Φ</td><td align="left">\Phi</td><td align="left">ϕ</td><td align="left">\phi</td></tr><tr><td align="left"></td><td align="left"></td><td align="left">φ</td><td align="left">\varphi</td></tr><tr><td align="left">X</td><td align="left">X</td><td align="left">χ</td><td align="left">\chi</td></tr><tr><td align="left">Ψ</td><td align="left">\Psi</td><td align="left">ψ</td><td align="left">\psi</td></tr><tr><td align="left">Ω</td><td align="left">\Omega</td><td align="left">ω</td><td align="left">\omega</td></tr></tbody></table><p><strong>三角函数</strong></p><table><thead><tr><th align="left">三角函数</th><th align="left">markdown</th></tr></thead><tbody><tr><td align="left">sin</td><td align="left">\sin</td></tr></tbody></table><p><strong>对数函数</strong></p><table><thead><tr><th align="left">算式</th><th align="left">markdown</th></tr></thead><tbody><tr><td align="left">ln15</td><td align="left">\ln15</td></tr><tr><td align="left">log210</td><td align="left">\log_2 10</td></tr><tr><td align="left">lg7</td><td align="left">\lg7</td></tr></tbody></table><p><strong>关系运算符</strong></p><table><thead><tr><th align="left">运算符</th><th align="left">markdown</th></tr></thead><tbody><tr><td align="left">±</td><td align="left">\pm</td></tr><tr><td align="left">×</td><td align="left">\times</td></tr><tr><td align="left">÷</td><td align="left">\div</td></tr><tr><td align="left">∑</td><td align="left">\sum</td></tr><tr><td align="left">∏</td><td align="left">\prod</td></tr><tr><td align="left">≠</td><td align="left">\neq</td></tr><tr><td align="left">≤</td><td align="left">\leq</td></tr><tr><td align="left">≥</td><td align="left">\geq</td></tr></tbody></table><p><strong>其它特殊字符</strong></p><table><thead><tr><th align="left">符号</th><th align="left">markdown</th></tr></thead><tbody><tr><td align="left">$\forall$</td><td align="left">\forall</td></tr><tr><td align="left">$\infty$</td><td align="left">\infty</td></tr><tr><td align="left">$\emptyset$</td><td align="left">\emptyset</td></tr><tr><td align="left">$\exists$</td><td align="left">\exists</td></tr><tr><td align="left">$\nabla$</td><td align="left">\nabla</td></tr><tr><td align="left">$\bot$</td><td align="left">\bot</td></tr><tr><td align="left">$\angle$</td><td align="left">\angle</td></tr><tr><td align="left">$\because$</td><td align="left">\because</td></tr><tr><td align="left">$\therefore$</td><td align="left">\therefore</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Blog Introduce</title>
      <link href="/2020/04/26/ruan-jian-gong-ju/hexotypora/hexo-blog-introduce/"/>
      <url>/2020/04/26/ruan-jian-gong-ju/hexotypora/hexo-blog-introduce/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is my very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a>.</p></blockquote><h2 id="Hexo-Introduce"><a href="#Hexo-Introduce" class="headerlink" title="Hexo Introduce"></a>Hexo Introduce</h2><blockquote><ul><li>Hexo is a fast, simple and powerful blog framework. You write posts in <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a> (or other markup languages) and Hexo generates static files with a beautiful theme in seconds.</li><li>Hexo+github+gitee blog deployment <a href="https://yafine66.gitee.io/posts/4ab2.html#toc-heading-60" target="_blank" rel="noopener">tutorial</a><ul><li>download Git&amp;&amp;Node.js</li><li>Github Register &amp;&amp; GithubPage Create</li><li>Configure Git user&amp;&amp;mail</li><li>Install Theme &amp;&amp; Config</li><li>Config Some Plugins</li></ul></li><li>Good Github Page Recommand:<ul><li><a href="https://mazhuang.org/" target="_blank" rel="noopener">https://mazhuang.org/</a></li><li><a href="http://www.liberxue.com/" target="_blank" rel="noopener">http://www.liberxue.com/</a></li><li><a href="https://rickfang666.github.io/about/" target="_blank" rel="noopener">https://rickfang666.github.io/about/</a></li><li><a href="https://ahrilove.top/" target="_blank" rel="noopener">https://ahrilove.top/</a></li></ul></li></ul></blockquote><h2 id="Hexo-Command"><a href="#Hexo-Command" class="headerlink" title="Hexo Command"></a>Hexo Command</h2><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo -g <span class="token comment" spellcheck="true">#安装  </span>$ <span class="token function">npm</span> update hexo -g <span class="token comment" spellcheck="true">#升级  </span>$ hexo init <span class="token comment" spellcheck="true">#初始化</span>$ hexo new page <span class="token string">"categories"</span>  <span class="token comment" spellcheck="true">#新建页面</span><span class="token comment" spellcheck="true"># 简写</span>$ hexo n <span class="token string">"我的博客"</span> <span class="token operator">==</span> hexo new <span class="token string">"我的博客"</span> <span class="token comment" spellcheck="true">#新建文章</span>$ hexo p <span class="token operator">==</span> hexo publish$ hexo g <span class="token operator">==</span> hexo generate<span class="token comment" spellcheck="true">#生成</span>$ hexo s <span class="token operator">==</span> hexo server <span class="token comment" spellcheck="true">#启动服务预览  对跟配置文件修改需要重启</span>$ hexo d <span class="token operator">==</span> hexo deploy<span class="token comment" spellcheck="true">#部署</span><span class="token comment" spellcheck="true"># 服务器</span>$ hexo server <span class="token comment" spellcheck="true">#Hexo 会监视文件变动并自动更新，您无须重启服务器。</span>$ hexo server -s <span class="token comment" spellcheck="true">#静态模式</span>$ hexo server -p 5000 <span class="token comment" spellcheck="true">#更改端口</span>$ hexo server -i 192.168.1.1 <span class="token comment" spellcheck="true">#自定义 IP</span>$ hexo clean <span class="token comment" spellcheck="true">#清除缓存db.json 网页正常情况下可以忽略此条命令</span><span class="token comment" spellcheck="true">#需要删掉用命令新建的文章或页面时，只需要进入 Hexo 根目录下的 source 文件夹，删除对应文件或文件夹即可</span>$ hexo g <span class="token comment" spellcheck="true">#生成静态页面至public目录</span>$ hexo s <span class="token comment" spellcheck="true">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span>$ hexo d <span class="token comment" spellcheck="true">#将.deploy目录部署到GitHub</span><span class="token comment" spellcheck="true">#监视文件变动</span>hexo generate --watch <span class="token comment" spellcheck="true">#监视文件变动</span></code></pre><blockquote><table><thead><tr><th align="left">配置选项</th><th align="left">默认值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">title</td><td align="left"><code>Markdown</code> 的文件标题</td><td align="left">文章标题，强烈建议填写此选项</td></tr><tr><td align="left">date</td><td align="left">文件创建时的日期时间</td><td align="left">发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td align="left">author</td><td align="left">根 <code>_config.yml</code> 中的 <code>author</code></td><td align="left">文章作者</td></tr><tr><td align="left">img</td><td align="left"><code>featureImages</code> 中的某个值</td><td align="left">文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径。如: <a href="https://yafine66.gitee.io/go.html?url=aHR0cDovL3h4eC5jb20veHh4LmpwZw==" target="_blank" rel="noopener">http://xxx.com/xxx.jpg</a></td></tr><tr><td align="left">top</td><td align="left"><code>true</code></td><td align="left">推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td align="left">cover</td><td align="left"><code>false</code></td><td align="left"><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td align="left">coverImg</td><td align="left">无</td><td align="left"><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td align="left">password</td><td align="left">无</td><td align="left">文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 verifyPassword选项</td></tr><tr><td align="left">toc</td><td align="left"><code>true</code></td><td align="left">是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td align="left">mathjax</td><td align="left"><code>false</code></td><td align="left">是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td align="left">summary</td><td align="left">无</td><td align="left">文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td align="left">categories</td><td align="left">无</td><td align="left">文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td align="left">tags</td><td align="left">无</td><td align="left">文章标签，一篇文章可以多个标签</td></tr><tr><td align="left">reprintPolicy</td><td align="left">cc_by</td><td align="left">文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux Operation</title>
      <link href="/2020/03/16/ruan-jian-gong-ju/linux/linux-operation/"/>
      <url>/2020/03/16/ruan-jian-gong-ju/linux/linux-operation/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux-命令"><a href="#Linux-命令" class="headerlink" title="Linux 命令"></a>Linux 命令</h2><h3 id="链接-ln"><a href="#链接-ln" class="headerlink" title="链接  ln"></a>链接  ln</h3><pre class=" language-shell"><code class="language-shell">sudo ln -sf /usr/bin/g++-8 /usr/bin/g++ln - make links between filesSYNOPSIS       ln [OPTION]... [-T] TARGET LINK_NAME   (1st form)       ln [OPTION]... TARGET                  (2nd form)       ln [OPTION]... TARGET... DIRECTORY     (3rd form)       ln [OPTION]... -t DIRECTORY TARGET...  (4th form)</code></pre><h3 id="man-命令"><a href="#man-命令" class="headerlink" title="man 命令"></a>man 命令</h3><pre><code>man -b (向前翻一屏)  space (向后翻一屏)  /keyword 查找  n: 下一个whatis command # 查询命令执行什么功能</code></pre><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><pre class=" language-bash"><code class="language-bash">Ctrl+c <span class="token comment" spellcheck="true">#在命令行下起着终止当前执行程序的作用，</span>Ctrl+d  <span class="token comment" spellcheck="true">#相当于exit命令，退出当前shell</span>win    <span class="token comment" spellcheck="true">#搜索浏览程序文件音乐文件</span>ctrl+L <span class="token comment" spellcheck="true">#清除屏幕</span>ctrl+A  <span class="token comment" spellcheck="true">#光标移到行首</span>super+R <span class="token comment" spellcheck="true"># terminal</span>ctrl+shift+prtsc  <span class="token comment" spellcheck="true">#截屏到剪切板</span>super+h <span class="token comment" spellcheck="true">#隐藏窗口</span>super+up <span class="token comment" spellcheck="true">#窗口最大化</span>super+down <span class="token comment" spellcheck="true">#窗口最小话</span></code></pre><h3 id="压缩包操作"><a href="#压缩包操作" class="headerlink" title="压缩包操作"></a>压缩包操作</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">tar</span> -zxvf 4.1.2.tar.gzunzip -d /temp test.zip  <span class="token comment" spellcheck="true">#解压到指定的目录下，需要用到-d参数</span></code></pre><h3 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> -O  <span class="token comment" spellcheck="true">#下载并以不同的文件名保存</span><span class="token function">wget</span> -b <span class="token comment" spellcheck="true">#后台下载   tail -f wget-log  查看下载速度</span><span class="token function">wget</span> –spider url <span class="token comment" spellcheck="true">#测试下载链接是否可用等等</span></code></pre><h3 id="软件安装命令-dpkg-apt-snap-ppa-使用"><a href="#软件安装命令-dpkg-apt-snap-ppa-使用" class="headerlink" title="软件安装命令 dpkg | apt | snap |ppa 使用:"></a>软件安装命令 dpkg | apt | snap |<strong>ppa 使用</strong>:</h3><pre class=" language-bash"><code class="language-bash">dpkg -p package-name  <span class="token comment" spellcheck="true">#显示包的具体信息</span>dpkg -s package-name  <span class="token comment" spellcheck="true">#报告指定包的状态信息    </span>dpkg -l                <span class="token comment" spellcheck="true">#显示所有已经安装的Deb包，同时显示版本号以及简短说明</span>dpkg -P            <span class="token comment" spellcheck="true">#删除一个包（包括配置信息）    </span>dpkg -A package_file  <span class="token comment" spellcheck="true">#从软件包里面读取软件的信息    </span>dpkg -i <span class="token operator">&lt;</span>.deb <span class="token function">file</span> name<span class="token operator">></span>  <span class="token comment" spellcheck="true">#安装软件    </span>apt update<span class="token operator">|</span><span class="token function">install</span><span class="token operator">|</span>upgradable<span class="token operator">|</span>remove<span class="token operator">|</span>purge<span class="token operator">|</span>search<span class="token comment" spellcheck="true"># tab键自动补全,apt下载时有锁</span><span class="token comment" spellcheck="true">#snap是一种全新的软件包管理方式，它类似一个容器拥有一个应用程序所有的文件和库，各个应用程序之间完全独立。所以使用snap包的好处就是它解决了应用程序之间的依赖问题，使应用程序之间更容易管理。但是由此带来的问题就是它占用更多的磁盘空间.snap软件包一般安装在/snap目录下</span>snap list <span class="token comment" spellcheck="true">#罗列</span>snap <span class="token function">find</span> <span class="token operator">|</span> <span class="token function">install</span> <span class="token operator">|</span> refresh <span class="token operator">|</span> remove packagesnap changes <span class="token comment" spellcheck="true"># 查看正在进行的下载</span>snap abort <span class="token function">id</span> <span class="token comment" spellcheck="true"># 停止下载</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> ppa-purgeTo purge a PPA, you must use the following command:<span class="token function">sudo</span> ppa-purge ppa:someppa/ppa     删除ppa 及对应软件<span class="token function">sudo</span> add-apt-repository ppa:someppa/ppa<span class="token function">sudo</span> apt update<span class="token function">sudo</span> add-apt-repository --remove ppa:someppa/ppa</code></pre><h3 id="网络命令-netstat-top"><a href="#网络命令-netstat-top" class="headerlink" title="网络命令 netstat ,top"></a>网络命令 netstat ,top</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># net-tools   包括ifconfig,netstat 等网络工具</span>top: <span class="token comment" spellcheck="true">#查看电脑个进程占用资源情况  b 高亮显示当前进程.</span><span class="token function">netstat</span> -a :Listing all ports <span class="token punctuation">(</span>both TCP and UDP<span class="token punctuation">)</span> using option.<span class="token function">netstat</span> -l <span class="token keyword">:</span> active listening ports connections<span class="token function">netstat</span> -s <span class="token keyword">:</span> displays statistics by protocol<span class="token function">netstat</span> -i <span class="token keyword">:</span> show the network interface<span class="token function">netstat</span> -r <span class="token keyword">:</span> show the routing<span class="token function">netstat</span> -ie <span class="token keyword">:</span> like <span class="token function">ifconfig</span><span class="token function">netstat</span> -ap <span class="token operator">|</span> <span class="token function">grep</span> http <span class="token keyword">:</span> <span class="token function">find</span> the listening program<span class="token comment" spellcheck="true">#查找程序是否运行</span><span class="token comment" spellcheck="true">#pgrep command – Looks through the currently running bash processes on Linux and lists the process IDs (PID) on screen.</span>pgrep nginx<span class="token comment" spellcheck="true">#pidof command – Find the process ID of a running program on Linux or Unix-like system</span>pidof nginx<span class="token comment" spellcheck="true">#ps command – Get information about the currently running Linux or Unix processes, including their process identification numbers (PIDs).</span><span class="token function">ps</span> aux <span class="token operator">|</span> <span class="token function">grep</span> nginx</code></pre><h3 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h3><pre class=" language-shell"><code class="language-shell">set | grep -i all_proxy# Unset socks proxyunset all_proxy     #根据上个命令输出决定是否用大写还是小写unset ALL_PROXY      #系统中的设置还在# Install missing dependencies:pip install pysocks# Reset proxysource ~/.bashrc</code></pre><h3 id="evince-pdf-文件查看"><a href="#evince-pdf-文件查看" class="headerlink" title="evince  pdf 文件查看"></a>evince  pdf 文件查看</h3><h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><h3 id="CPU-温度"><a href="#CPU-温度" class="headerlink" title="CPU 温度"></a>CPU 温度</h3><pre class=" language-shell"><code class="language-shell">sudo apt install lm-sensors hddtempsudo sensors-detectsensors#如果有虚拟温度显示sudo apt install psensor  #设置开机自启,监控温度</code></pre><h3 id="VimOp"><a href="#VimOp" class="headerlink" title="VimOp"></a>VimOp</h3><table><thead><tr><th align="center">操作符</th><th align="right">作用</th></tr></thead><tbody><tr><td align="center"><code>control</code>+<code>A</code></td><td align="right">移动光标至行首</td></tr><tr><td align="center"><code>control</code>+<code>E</code></td><td align="right">移动光标至行尾</td></tr><tr><td align="center"><code>control</code>+<code>U</code></td><td align="right">删除整行命令</td></tr><tr><td align="center"><code>control</code>+<code>K</code></td><td align="right">删除光标后面的内容</td></tr><tr><td align="center"><code>option</code>+<code>←</code>、<code>→</code></td><td align="right">按词组移动光标</td></tr><tr><td align="center">!!</td><td align="right">执行上一条命令</td></tr><tr><td align="center">！</td><td align="right">重复命令，例如$ ! -3 执行前面三条命令; $ ! pod 重复最近一次pod命令</td></tr><tr><td align="center">|</td><td align="right">将左侧的命令结果人给右侧命令</td></tr><tr><td align="center">&gt;</td><td align="right">等待前一天命令结束</td></tr><tr><td align="center">&amp;&amp;</td><td align="right">多条命令同时执行</td></tr><tr><td align="center">&amp;</td><td align="right">不管前面执行是否成功都执行后面的命令</td></tr></tbody></table><h3 id="Cmake"><a href="#Cmake" class="headerlink" title="Cmake"></a>Cmake</h3><ul><li>中find_package() 工作原理：<a href="https://www.jianshu.com/p/46e9b8a6cb6a" target="_blank" rel="noopener">https://www.jianshu.com/p/46e9b8a6cb6a</a></li></ul><pre class=" language-shell"><code class="language-shell">cmake-gui #图像化cmakecmake --versionapt-get remove cmakecd /usr/local/srcwget https://github.com/Kitware/CMake/releases/download/v3.15.3/cmake-3.15.3.tar.gztar -xvzf cmake-3.15.3.tar.gzcd cmake-3.15.3./bootstrapmake -j4make install##python 使用C++11 框架 pylind11</code></pre><h3 id="gcc-cpp-g-区别"><a href="#gcc-cpp-g-区别" class="headerlink" title="gcc cpp g++ 区别"></a>gcc cpp g++ 区别</h3><pre class=" language-shell"><code class="language-shell">gcc和g++的主要区别# 1. 对于 *.c和*.cpp文件，gcc分别当做c和cpp文件编译（c和cpp的语法强度是不一样的）# 2. 对于 *.c和*.cpp文件，g++则统一当做cpp文件编译# 3. 使用g++编译文件时，g++会自动链接标准库STL，而gcc不会自动链接STL# 4. gcc在编译C文件时，可使用的预定义宏是比较少的# 5. gcc在编译cpp文件时/g++在编译c文件和cpp文件时（这时候gcc和g++调用的都是cpp文件的编译器），会加入一些额外的宏，这些宏如下：# 6. 在用gcc编译c++文件时，为了能够使用STL，需要加参数 –lstdc++ ，但这并不代表 gcc –lstdc++ 和 g++等价，它们的区别不仅仅是这个#gcc 版本gcc -versionsudo apt-get install gcc-5 g++-5sudo update-alternatives --install /usr/bin/gcc gcc/usr/bin/gcc-5 50  #change privilege</code></pre><h3 id="SCP文件互传"><a href="#SCP文件互传" class="headerlink" title="SCP文件互传"></a>SCP文件互传</h3><pre class=" language-shell"><code class="language-shell">scp ubuntu@140.143.210.30:/usr/local/apache-tomcat-9.0.22/webapps/temp.zip ~#scp 命令将服务器上文件拷贝至本地</code></pre><h3 id="ubuntu-VMWare-worstation-pro-15"><a href="#ubuntu-VMWare-worstation-pro-15" class="headerlink" title="ubuntu VMWare worstation pro 15"></a>ubuntu VMWare worstation pro 15</h3><pre class=" language-shell"><code class="language-shell">#下载地址 https://www.vmware.com/products/workstation-pro/workstation-pro-evaluation.html#VMware Workstation All Key：https://www.cnblogs.com/dunitian/p/8414055.htmlsudo ./VMWare-*sudo vmware-installer -u vmware-workstation  #卸载  </code></pre><h3 id="网速测量speedtest"><a href="#网速测量speedtest" class="headerlink" title="网速测量speedtest"></a>网速测量speedtest</h3><pre class=" language-shell"><code class="language-shell">git clone https://github.com/sivel/speedtest-cli.gitcd speedtest-clipython speedtest.py#具体可以看下readme操作，可以通过pip 方式安装</code></pre><h3 id="pytorch"><a href="#pytorch" class="headerlink" title="pytorch"></a>pytorch</h3><pre class=" language-shell"><code class="language-shell">#方式一：  #      通过官方网站（https://pytorch.org/）给的方法进行安装，根据自己的系统环境及相应python，CUDA版本运行相应的命令进行安装。如果电脑中只有python3，这里的pip3可以直接就用pip代替。conda install pytorch torchvision cudatoolkit=10.1 -c pytorch#遇问题 有关proxy#解决方案: 在 .bashrc 中添加: export all_proxy="socks5://127.0.0.1:1080"#cudatoolkit        pkgs/main/linux-64::cudatoolkit-10.1.243-h6bb024c_0#  ninja              pkgs/main/linux-64::ninja-1.9.0-py37hfd86e86_0 # pytorch            pytorch/linux-64::pytorch-1.3.1-py3.7_cuda10.1.243_cudnn7.6.3_0 # torchvision        pytorch/linux-64::torchvision-0.4.2-py37_cu101#方式二：   https://download.pytorch.org/whl/torch_stable.html#    直接下载torch的whl文件，通过pip install （路径+whl文件名）#    可以下载到本地 anaconda\install\Lib\site-packages路径下，或者在线下载安装</code></pre><h3 id="caffe-安装"><a href="#caffe-安装" class="headerlink" title="caffe 安装"></a>caffe 安装</h3><pre class=" language-shell"><code class="language-shell">sudo apt install caffe-cudasudo apt build-dep caffe-cuda       # dependencies for CUDA versionsudo vim /etc/apt/sources.list   #将deb-src 注释掉#遇到问题 dpkg-deb: error: paste subprocess was killed by signal (Broken pipe)#Errors were encountered while processing:# /var/cache/apt/archives/nvidia-cuda-dev_9.1.85-3ubuntu1_amd64.deb#sudo dpkg -i --force-overwrite /var/cache/apt/archives/nvidia-418_418.39-0ubuntu1_amd64.deb#sudo apt --fix-broken install</code></pre><h3 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> systemctl start application.service   <span class="token comment" spellcheck="true">#同 systemctl start application  ,系统默认查找application.service    stop, restart,reload</span><span class="token function">sudo</span> systemctl enable/disable application.service   <span class="token comment" spellcheck="true">#start a service at boot create a symbolic link from the system’s copy of the service file (usually in /lib/systemd/system or /etc/systemd/system) into the location on disk where systemd looks for autostart files (usually /etc/systemd/system/some_target.target.wants</span>systemctl status application.service  <span class="token comment" spellcheck="true">#查看服务状态</span>systemctl list-units  <span class="token comment" spellcheck="true"># list all of the units that systemd currently has active </span>systemctl list-dependencies application.service  <span class="token comment" spellcheck="true">#查找关系依赖树</span></code></pre><h3 id="搜狗输入法"><a href="#搜狗输入法" class="headerlink" title="搜狗输入法"></a>搜狗输入法</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> remove ibus<span class="token function">sudo</span> <span class="token function">apt-get</span> purge ibus     <span class="token comment" spellcheck="true">#purge  </span><span class="token function">sudo</span>  <span class="token function">apt-get</span> remove indicator-keyboard<span class="token function">sudo</span> apt <span class="token function">install</span> fcitx-table-wbpy fcitx-config-gtkim-config -n fcitx选择系统设置语言 https://pinyin.sogou.com/linux/  <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> -ffcitx-config-gtk3fcitx设置 <span class="token operator">>></span>附加组件<span class="token operator">>></span>勾选高级 <span class="token operator">>></span>取消经典界面Configure<span class="token operator">>></span>  Addon  <span class="token operator">>></span>Advanced<span class="token operator">>></span>Classic,sogouyun<span class="token comment" spellcheck="true">#重启 把sogoupinyin放在第二个</span><span class="token comment" spellcheck="true">#只用sogou 输入法一种就行了</span><span class="token comment" spellcheck="true">#搜狗云输入的锅，在fcitx配置里把搜狗云拼音这个选项去掉就可以很完美的解决这问题了  解决占cpu</span><span class="token comment" spellcheck="true">#中文输入时没有汉字提示时下载一个 皮肤 ,用搜狗软件打开就行可</span><span class="token comment" spellcheck="true">#https://pinyin.sogou.com/skins/detail/view/info/588600?rf=cate_31_sign&amp;tf=p</span></code></pre><h3 id="多线程下载软件源"><a href="#多线程下载软件源" class="headerlink" title="多线程下载软件源:"></a>多线程下载软件源:</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> add-apt-repository ppa:apt-fast/stable<span class="token function">sudo</span> <span class="token function">apt-get</span> update</code></pre><h3 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> apt <span class="token function">install</span> openjdk-11-jdk</code></pre><h3 id="VSCODE"><a href="#VSCODE" class="headerlink" title="VSCODE"></a>VSCODE</h3><ul><li><p>格式化代码</p><pre><code>vs code格式化代码的快捷键如下：（来源于这里）On Windows Shift + Alt + F.On Mac Shift + Option + F.On Ubuntu Ctrl + Shift + I.</code></pre></li><li><p>常用插件</p><ul><li>Beautify</li><li>TODO Highlight</li><li>Code Spell Checker</li><li>IntelliSense for CSS class names in HTML</li></ul></li><li><p>删除多余空行  全局替换  ^\s*(?=\r?$)\n     Alt+R 正则表达式</p></li></ul><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> ubuntu-make  <span class="token comment" spellcheck="true"># 像这种开发软件去官网下载安装包</span><span class="token comment" spellcheck="true">#查看版本</span>code --versioncode <span class="token comment" spellcheck="true">#运行vscode</span><span class="token comment" spellcheck="true">#Ctrl+Shift+P打开命令面板</span><span class="token comment" spellcheck="true">#c_cpp_properties.json  该文件用于指定一般的编译环境，包括头文件路径，编译器的路径等。通过 Ctrl + Shift + p 打开命令行，键入关键字 "C++"，在下拉菜单中选择 "C/C++ Edit configuration"，系统即自动在 .vscode 目录下创建 c_cpp_properties.json 文件，供用户进行编译方面的环境配置。</span><span class="token punctuation">{</span>    <span class="token string">"configurations"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token string">"name"</span><span class="token keyword">:</span> <span class="token string">"Linux"</span>,            <span class="token string">"includePath"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>                <span class="token string">"<span class="token variable">${workspaceFolder}</span>/**"</span>            <span class="token punctuation">]</span>,            <span class="token string">"defines"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>,            <span class="token string">"compilerPath"</span><span class="token keyword">:</span> <span class="token string">"/usr/bin/gcc"</span>,            <span class="token string">"cStandard"</span><span class="token keyword">:</span> <span class="token string">"c11"</span>,            <span class="token string">"cppStandard"</span><span class="token keyword">:</span> <span class="token string">"c++17"</span>,            <span class="token string">"intelliSenseMode"</span><span class="token keyword">:</span> <span class="token string">"clang-x64"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span>,    <span class="token string">"version"</span><span class="token keyword">:</span> 4<span class="token punctuation">}</span><span class="token comment" spellcheck="true">#build.json  该文件用于指定程序的编译规则，即如何将源文件编译为可执行程序。通过 Ctrl + Shift + p 打开命令行，键入关键字 "task"，并在下拉菜单中选择 Tasks: Configure Default Build Task -> Create tassk.json file from template -> Others ，系统即自动在 .vscode 目录下创建 build.json 文件，供用户设置具体的编译规则</span><span class="token punctuation">{</span>    // See https://go.microsoft.com/fwlink/?LinkId<span class="token operator">=</span>733558    // <span class="token keyword">for</span> the documentation about the tasks.json <span class="token function">format</span>    <span class="token string">"version"</span><span class="token keyword">:</span> <span class="token string">"2.0.0"</span>,    <span class="token string">"tasks"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token string">"label"</span><span class="token keyword">:</span> <span class="token string">"echo"</span>,            <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"shell"</span>,            <span class="token string">"command"</span><span class="token keyword">:</span> <span class="token string">"g++"</span>,                   //编译时执行的程序            <span class="token string">"args"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token string">"-g"</span>, <span class="token string">"-o"</span>, <span class="token string">"test"</span>, <span class="token string">"test1.c"</span><span class="token punctuation">]</span>,    //传递给 <span class="token function">command</span> 的参数            <span class="token string">"problemMatcher"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>                <span class="token string">"<span class="token variable">$gcc</span>"</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># Ctrl+Shift+p 打开命令行，选择 Tasks:Run Build Task 运行上述编译过程</span><span class="token comment" spellcheck="true">#launch.json  该文件主要与程序的调试相关。用户可通过 Ctrl+Shift+p 打开命令行，键入关键字 "launch",选择 "Debug:Open launch.json" -> "C++(GDB/LLDB)"，即可打开调试的配置文件 launch.json。在 VSCode 中，用户按 F5 即可进入调试模式，上述 launch.json 文件即设置在调试时的基本内容和要求。</span></code></pre><h3 id="indicator-sysmonitor"><a href="#indicator-sysmonitor" class="headerlink" title="indicator-sysmonitor"></a>indicator-sysmonitor</h3><p>一款可以监视 CPU 占用率、 CPU 温度、内存占用率、网速等系统信息的小软件，在桌面最上方进行显示。Top 的图形化命令</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># sudo add-apt-repository ppa:fossfreedom/indicator-sysmonitor  </span><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> indicator-sysmonitor</code></pre><h3 id="GDebi"><a href="#GDebi" class="headerlink" title="GDebi"></a>GDebi</h3><pre class=" language-shell"><code class="language-shell">#若用 Ubuntu 自带的软件中心安装 deb 格式的文件不仅经常会崩溃而且会遇到各种各样的依赖问题。通过deb文件安装软件优选sudo apt-get install gdebi</code></pre><h3 id="Marp"><a href="#Marp" class="headerlink" title="Marp"></a>Marp</h3><p>用 Markdown 语法来制作 PPT，高效快速简洁实用，尤其是支持 LaTeX 语法，非常方便编辑大量的数学公式，值得推荐，官网有 deb 文件，下载后直接安装即可。</p><h3 id="新立得软件管理"><a href="#新立得软件管理" class="headerlink" title="新立得软件管理"></a>新立得软件管理</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> synaptic  <span class="token comment" spellcheck="true">#  全面高效地管理各种软件和依赖。</span></code></pre><h3 id="Tim"><a href="#Tim" class="headerlink" title="Tim"></a>Tim</h3><blockquote><p>Tim 安装   去官网 下载linux QQ  但qq上没有我的设备<br><a href="https://im.qq.com/linuxqq/download.html" target="_blank" rel="noopener">https://im.qq.com/linuxqq/download.html</a><br><a href="https://github.com/wszqkzqk/deepin-wine-ubuntu/releases" target="_blank" rel="noopener">https://github.com/wszqkzqk/deepin-wine-ubuntu/releases</a>   #wine的一个版本<br><a href="https://www.lulinux.com/archives/1319" target="_blank" rel="noopener">https://www.lulinux.com/archives/1319</a>  #deepin-wine Tim安装教程<br><strong>Winehq</strong>:<a href="https://wiki.winehq.org/Ubuntu_zhcn" target="_blank" rel="noopener">https://wiki.winehq.org/Ubuntu_zhcn</a>   学习如何使用  回去学习下winehq使用教程<a href="https://wiki.winehq.org/Wine_User' target=" _blank"="" rel="noopener" s_guide"="">https://wiki.winehq.org/Wine_User%27s_Guide</a><br>Usage: wine PROGRAM [ARGUMENTS…]   Run the specified program<br>       wine –help                   Display this help and exit<br>       wine –version                Output version information and exit<br>运行方式1:cd ‘.wine/drive_c/Games/Tron’<br>         wine tron.exe<br>运行方式2:wine start ‘C:\Games\Tron\tron.exe’<br>        wine start “C:\Games\Tron\tron.exe”<br>        wine start /unix “$HOME/installers/TronSetup.exe”<br>        wine quake.exe -map e1m1   #带参数<br>        wine start whatever.msi<br>         wine control<br>         wine uninstaller</p></blockquote><h3 id="mega网盘安装"><a href="#mega网盘安装" class="headerlink" title="mega网盘安装"></a>mega网盘安装</h3><blockquote><p><a href="https://mega.nz/sync" target="_blank" rel="noopener">https://mega.nz/sync</a>   去官网安装 需要联网</p></blockquote><h3 id="V2Ray-安装"><a href="#V2Ray-安装" class="headerlink" title="V2Ray 安装"></a>V2Ray 安装</h3><pre class=" language-shell"><code class="language-shell">#然后编辑`/etc/v2ray/config.json`文件service v2ray stop service v2ray start service v2ray status#https://github.com/FelisCatus/SwitchyOmega/wiki/GFWList</code></pre><ul><li><h3 id="v2ray-go-sh脚本阅读记录"><a href="#v2ray-go-sh脚本阅读记录" class="headerlink" title="#v2ray/go.sh脚本阅读记录"></a>#v2ray/go.sh脚本阅读记录</h3></li></ul><pre class=" language-bash"><code class="language-bash">$<span class="token comment" spellcheck="true"># 表示执行脚本传入参数的个数</span><span class="token variable">$*</span>  表示执行脚本传入参数列表$$ 表示进程id<span class="token variable">$@</span>表示执行脚本传入所有参数<span class="token variable">$0</span> 表示执行脚本名称<span class="token variable">$1</span> 表示第一个参数<span class="token variable">$2</span> 表示第二个参数<span class="token variable">$?</span> 表示脚本执行状态0正常，其他表示有错误<span class="token comment" spellcheck="true">#提取文件到某个位置函数  </span><span class="token comment" spellcheck="true">#获取系统本版/检查版本更新   getVersion()/checkUpdate()</span><span class="token comment" spellcheck="true">#检查系统架构  SysArch()</span><span class="token comment" spellcheck="true">#获得系统 install update 指令   'command -v apt-get' 判断系统是否有apt-get 指令</span><span class="token comment" spellcheck="true">#prompt 颜色设置  colorEcho()</span><span class="token comment" spellcheck="true">#下载文件   downloadv2ray()</span><span class="token comment" spellcheck="true"># echo $VER | head -n 1 | cut -d " " -f2`  </span><span class="token comment" spellcheck="true">#关闭或启动软件  stopV2ray() startV2ray() 通过检查systemctl/service 命令</span><span class="token comment" spellcheck="true">#copy 文件  copyFile()</span><span class="token comment" spellcheck="true">#添加执行权限 makeExecutable()</span><span class="token comment" spellcheck="true"># help() 帮助提示框</span>installInitScript<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> -n <span class="token string">"<span class="token variable">${SYSTEMCTL_CMD}</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>        <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token operator">!</span> -f <span class="token string">"/etc/systemd/system/v2ray.service"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>            <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token operator">!</span> -f <span class="token string">"/lib/systemd/system/v2ray.service"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>                <span class="token function">cp</span> <span class="token string">"<span class="token variable">${VSRC_ROOT}</span>/systemd/v2ray.service"</span> <span class="token string">"/etc/systemd/system/"</span>                systemctl <span class="token function">enable</span> v2ray.service            <span class="token keyword">fi</span>        <span class="token keyword">fi</span>        <span class="token keyword">return</span>    <span class="token keyword">elif</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> -n <span class="token string">"<span class="token variable">${SERVICE_CMD}</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token operator">!</span> -f <span class="token string">"/etc/init.d/v2ray"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        installSoftware <span class="token string">"daemon"</span> <span class="token operator">||</span> <span class="token keyword">return</span> <span class="token variable">$?</span>        <span class="token function">cp</span> <span class="token string">"<span class="token variable">${VSRC_ROOT}</span>/systemv/v2ray"</span> <span class="token string">"/etc/init.d/v2ray"</span>        <span class="token function">chmod</span> +x <span class="token string">"/etc/init.d/v2ray"</span>        update-rc.d v2ray defaults    <span class="token keyword">fi</span>    <span class="token keyword">return</span><span class="token punctuation">}</span><span class="token function">sed</span> -i <span class="token string">"s/10086/<span class="token variable">${PORT}</span>/g"</span> <span class="token string">"/etc/v2ray/config.json"</span>  <span class="token comment" spellcheck="true">#学习这个指令</span>downloadV2Ray <span class="token operator">||</span> <span class="token keyword">return</span> <span class="token variable">$?</span>installV2Ray<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#包括下载到那个目录,copy了那些文件,如何根据配置文件进行配置的</span>remove<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span># 卸载停止服务,把安转时写入的文件全部删除      /etc/systemd/system/v2ray.service       /usr/bin/v2ray    /lib/systemd/system/v2ray.service    /etc/init.d/v2ray<span class="token punctuation">}</span></code></pre><h3 id="修改github-DNS"><a href="#修改github-DNS" class="headerlink" title="修改github DNS"></a>修改github DNS</h3><pre class=" language-shell"><code class="language-shell">#https://www.linuxidc.com/Linux/2019-05/158461.htm#github219.76.4.4 github-cloud.s3.amazonaws.com192.30.253.112 github.com151.101.185.194 github.global.ssl.fastly.netldd@ldd:~/v2ray$ sudo vim /etc/hostsldd@ldd:~/v2ray$ sudo /etc/init.d/networking restart </code></pre><h3 id="WPS-去官网下载"><a href="#WPS-去官网下载" class="headerlink" title="WPS 去官网下载"></a>WPS 去官网下载</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#http://www.wps.cn/product/wpslinux  </span><span class="token function">sudo</span> dpkg -i wps-office_10.1.0.6757_amd64.deb</code></pre><h3 id="IDEA下载"><a href="#IDEA下载" class="headerlink" title="IDEA下载"></a><a href="https://www.jetbrains.com/idea/download/#section=linux" target="_blank" rel="noopener">IDEA下载</a></h3><h3 id="Teamview-deb-安装"><a href="#Teamview-deb-安装" class="headerlink" title="Teamview   deb 安装"></a>Teamview   deb 安装</h3><h3 id="proxyee-down命令行安装-百度云下载神器"><a href="#proxyee-down命令行安装-百度云下载神器" class="headerlink" title="proxyee-down命令行安装  百度云下载神器"></a>proxyee-down命令行安装  百度云下载神器</h3><h3 id="docky-桌面工具"><a href="#docky-桌面工具" class="headerlink" title="docky 桌面工具"></a>docky 桌面工具</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span>  docky   <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> gnome-tweak-tool <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> gnome-shell-extensions <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> gnome-shell-extension-dashtodock<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> gnome-shell-extension-autohidetopbar<span class="token comment" spellcheck="true">#也可以在Ubuntu软件中直接搜索hide top bar</span><span class="token function">sudo</span> <span class="token function">apt-get</span> remove gnome-shell-extension-autohidetopbar <span class="token comment" spellcheck="true">#卸载</span><span class="token comment" spellcheck="true">#快捷键设置</span>gnome-screenshot -ac  <span class="token comment" spellcheck="true"># 也具有qq截图到快捷键功能</span><span class="token comment" spellcheck="true">#在打开——系统设置——>键盘——快捷键——自定义快捷键，然后输入名字和上边工具的命令</span></code></pre><h3 id="Opencv"><a href="#Opencv" class="headerlink" title="Opencv"></a>Opencv</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#python 包</span>pip uninstall opencv-pythonpip <span class="token function">install</span> opencv-contrib-python <span class="token comment" spellcheck="true">#opencv4. 源码编译安装， 也可以直接编译Android 依赖库</span><span class="token comment" spellcheck="true">#https://www.pluvet.com/archives/223.html 安装教程</span><span class="token function">sudo</span> add-apt-repository “deb http://security.ubuntu.com/ubuntu xenial-security main”<span class="token function">sudo</span> apt update<span class="token function">sudo</span> apt <span class="token function">install</span> libjasper1 libjasper-dev  <span class="token function">sudo</span> apt-fast <span class="token function">install</span> build-essential cmake libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libdc1394-22-devcmake <span class="token punctuation">..</span><span class="token function">make</span> -j4<span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span></code></pre><h3 id="Python-命令转换"><a href="#Python-命令转换" class="headerlink" title="Python 命令转换"></a>Python 命令转换</h3><p>pip 切换镜像  最终写入文件 /home/ldd/.config/pip/pip.conf</p><pre class=" language-shell"><code class="language-shell">pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</code></pre><p>方式一：系统默认一个版本，在另装一个版本，通过软连接</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 以后使用anaconda</span><span class="token comment" spellcheck="true">#查看当前默认Python版本</span>python --version <span class="token comment" spellcheck="true">#查看Python所在</span><span class="token function">which</span> is python<span class="token function">which</span> is python3<span class="token comment" spellcheck="true">#Python下载的库可以查看这里。/usr/local/lib/</span><span class="token comment" spellcheck="true">#显示Python代替版本信息</span>update-alternatives --list python<span class="token comment" spellcheck="true">#设置 /usr/bin/python3.5 设置的优先级为2 优先级越高越大</span>update-alternatives --install /usr/bin/python python /usr/bin/python2.7 1update-alternatives --install /usr/bin/python python /usr/bin/python3.5 2<span class="token comment" spellcheck="true">#再次显示Python代替版本信息</span>update-alternatives --remove python /usr/bin/python2.7<span class="token comment" spellcheck="true">#切换版本</span><span class="token function">sudo</span> update-alternatives --config python<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python3-pip <span class="token comment" spellcheck="true"># #安装Python3对应的pip3</span><span class="token function">sudo</span> pip3 <span class="token function">install</span> --upgrade pip   <span class="token comment" spellcheck="true">#推荐在管理员模式下更新</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python-pip  <span class="token comment" spellcheck="true">#安装Python2对应的pip</span><span class="token comment" spellcheck="true">#Pip  安装的库会放在这个目录下面：python2.7/site-packages；</span><span class="token comment" spellcheck="true">#pip3 新安装的库会放在这个目录下面：python3.6/site-packages；</span><span class="token comment" spellcheck="true">#参考https://www.cnblogs.com/carle-09/p/9907274.html</span><span class="token comment" spellcheck="true">#errorPermission denied: '/usr/local/lib/python3.6/dist-packages/cycler.py' Consider using the `--user` option or check the permissions.</span>pip3 <span class="token function">install</span> --user matplotlib  <span class="token comment" spellcheck="true">#The 'pip==9.0.3' distribution was not found and is required by the application</span><span class="token function">sudo</span> easy_install pip<span class="token operator">==</span>9.0.3  <span class="token comment" spellcheck="true">#解决</span></code></pre><p>方式二：安装anaconda，然后建立基于不同python版本的conda环境</p><p>方式三：建立虚拟机virtualenv，然后建立基于不同python版本的虚拟环境</p><h3 id="MySQL-安装"><a href="#MySQL-安装" class="headerlink" title="MySQL 安装"></a>MySQL 安装</h3><pre class=" language-shell"><code class="language-shell">sudo apt-get install mysql-serversudo mysql_secure_installation  #设置密码 liudongdongsudo mysql   #可以直接登录sudo systemctl start mysql</code></pre><h3 id="Net-core-安装"><a href="#Net-core-安装" class="headerlink" title=".Net core 安装"></a>.<a href="https://dotnet.microsoft.com/download/linux-package-manager/ubuntu18-04/sdk-current" target="_blank" rel="noopener">Net core 安装</a></h3><h3 id="mssql-server安装"><a href="#mssql-server安装" class="headerlink" title="mssql-server安装"></a><a href="https://docs.microsoft.com/zh-cn/sql/linux/quickstart-install-connect-ubuntu?view=sql-server-ver15#connect-locally" target="_blank" rel="noopener">mssql-server安装</a></h3><pre class=" language-shell"><code class="language-shell">sudo apt-fast install libodbc1 unixodbc msodbcsql mssql-tools unixodbc-dev</code></pre><h3 id="NVIDIA显卡驱动-cuda"><a href="#NVIDIA显卡驱动-cuda" class="headerlink" title="NVIDIA显卡驱动 cuda"></a>NVIDIA显卡驱动 cuda</h3><pre class=" language-bash"><code class="language-bash"> <span class="token comment" spellcheck="true">#驱动安装</span> <span class="token function">sudo</span> ubuntu-drivers devices  查看系统支持的显卡设备并下载<span class="token comment" spellcheck="true">#**系统设置** > **细节**窗口，你会发现Ubuntu正在使用Nvidia显卡。</span>lspci -k <span class="token operator">|</span> <span class="token function">grep</span> -A 2 -i <span class="token string">"VGA"</span>software-properties-gtknvidia-settings       <span class="token comment" spellcheck="true">#打开nvidia 设置软件页面</span>ubuntu-drivers devices    <span class="token comment" spellcheck="true">#推荐显卡和驱动</span><span class="token function">sudo</span> ubuntu-drivers autoinstall  <span class="token comment" spellcheck="true">#显示推荐的驱动</span><span class="token function">sudo</span> <span class="token function">apt-get</span> updateapt search nvidia-driver-418lshw -C video   <span class="token comment" spellcheck="true">#查看设备       </span>lspci <span class="token operator">|</span> <span class="token function">grep</span> -i nvidia  <span class="token comment" spellcheck="true">#verify you have a cuda-Capble GPU</span><span class="token comment" spellcheck="true">#查看当前NVIDIA驱动版本</span><span class="token function">sudo</span> dpkg --list <span class="token operator">|</span> <span class="token function">grep</span> nvidia-*<span class="token comment" spellcheck="true">#查看本机GPU</span><span class="token function">uname</span> -r <span class="token comment" spellcheck="true">#current running kernel</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> linux-headers-<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> -r<span class="token variable">)</span></span> <span class="token comment" spellcheck="true"># the kernel headers and development packages</span>gcc --version      <span class="token comment" spellcheck="true">#是否安装gcc</span><span class="token comment" spellcheck="true">#disable Nouveau  如果不适用nvida 驱动时需要改回</span>lsmod <span class="token operator">|</span> <span class="token function">grep</span> nouveau   <span class="token comment" spellcheck="true">#如果有输出则需要关闭</span><span class="token comment" spellcheck="true">#创建文件  vim /etc/modprobe.d/blacklist-nouveau.conf</span>blacklist nouveauoptions nouveau modeset<span class="token operator">=</span>0<span class="token comment" spellcheck="true">#then regenerate the kernel</span><span class="token function">sudo</span> update-initramfs -u<span class="token comment" spellcheck="true">#cuda 有俩中安装方式</span>    <span class="token comment" spellcheck="true"># 1: distribution-specific packages(RPM,Deb packages) recommended</span>    <span class="token comment" spellcheck="true"># 2: distribute-independent package(runfile package)  working across a wider set of linux distribution ,but doesn't update the native package management system</span><span class="token comment" spellcheck="true">#download the nvidia toolkit</span><span class="token comment" spellcheck="true"># http://develop.nvidia.com/cuda-downloads  包含 cuda 驱动和一些工具包括库,应用程序,示例程序等</span><span class="token comment" spellcheck="true">#校验下载是否正确</span>md5sum filename<span class="token comment" spellcheck="true">#具体安装下载时有说明</span><span class="token comment" spellcheck="true">#下载其他版本冲突情况看下表:</span><span class="token comment" spellcheck="true">#卸载分俩种情况</span><span class="token comment" spellcheck="true"># 1: 卸载通过 runfile  下载</span><span class="token function">sudo</span> /usr/local/cuda-x.y/bin/uninstall_cuda_x.y.pl<span class="token comment" spellcheck="true">#     卸载通过 runfile 下载的驱动</span><span class="token function">sudo</span> /usr/bin/nvidia-uninstall<span class="token comment" spellcheck="true"># 2: 卸载通过deb/RPM 包下载的软件</span><span class="token function">sudo</span> <span class="token function">apt-get</span> --purge remove <span class="token operator">&lt;</span>package_name<span class="token operator">></span> <span class="token comment" spellcheck="true"># Ubuntu</span><span class="token comment" spellcheck="true">#或者To remove CUDA Toolkit:</span>$ <span class="token function">sudo</span> <span class="token function">apt-get</span> --purge remove <span class="token string">"*cublas*"</span> <span class="token string">"cuda*"</span><span class="token comment" spellcheck="true">#To remove NVIDIA Drivers:</span>$ <span class="token function">sudo</span> <span class="token function">apt-get</span> --purge remove <span class="token string">"*nvidia*"</span><span class="token comment" spellcheck="true">#download the cuda toolkit packages https://developer.nvidia.com/cuda-downloads?target_os=Linux&amp;target_arch=x86_64&amp;target_distro=Ubuntu&amp;target_version=1804&amp;target_type=deblocal</span><span class="token comment" spellcheck="true">#安装cuda10.1</span><span class="token function">sudo</span> dpkg -i cuda-repo-ubuntu1804-10-1-local-10.1.168-418.67_1.0-1_amd64.deb<span class="token function">sudo</span> apt-key add /var/cuda-repo-<span class="token operator">&lt;</span>version<span class="token operator">></span>/7fa2af80.pub <span class="token comment" spellcheck="true">#本地文件，里面是一些NVidia deb安装包</span><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> cudanvidia-smi    <span class="token comment" spellcheck="true">#查看NVIDIA 相关信息 ，这里是选择NVIDIA驱动才会显示</span><span class="token comment" spellcheck="true">#安装cuda toolkit  这和cuda 驱动没有关系</span><span class="token comment" spellcheck="true">#cudnn 在/usr/local/目录下  ； cuda_toolkit 在/usr/local/cuda-版本号</span><span class="token function">wget</span> https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-ubuntu1804.pin<span class="token function">sudo</span> <span class="token function">mv</span> cuda-ubuntu1804.pin /etc/apt/preferences.d/cuda-repository-pin-600<span class="token function">wget</span> http://developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda-repo-ubuntu1804-10-2-local-10.2.89-440.33.01_1.0-1_amd64.deb<span class="token function">sudo</span> dpkg -i cuda-repo-ubuntu1804-10-2-local-10.2.89-440.33.01_1.0-1_amd64.deb<span class="token function">sudo</span> apt-key add /var/cuda-repo-10-2-local-10.2.89-440.33.01/7fa2af80.pub<span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> -y <span class="token function">install</span> cuda       <span class="token comment" spellcheck="true">#下载更新cuda 和driven</span><span class="token comment" spellcheck="true">#这个步操作后，会把之前的的驱动改为418 ，这里显示驱动不匹配，把驱动删除，然后重新下载驱动，问题解决， 但是后期会不会存在问题不清楚  ，cuda10.1 对内核的要求不清楚，使用5.0.0-35 内核的，但好像不推荐</span><span class="token comment" spellcheck="true">#驱动匹配问题解决方法2:</span><span class="token function">ls</span> mod <span class="token operator">|</span> <span class="token function">grep</span> nvidia<span class="token function">sudo</span> rmmod nvidia_uvm<span class="token function">sudo</span> rmmod nvidia_modeset<span class="token function">sudo</span> rmmod nvidia<span class="token function">sudo</span> apt <span class="token function">install</span> cuda-drivers<span class="token comment" spellcheck="true">#Reboot the system to load the NVIDIA drivers.</span><span class="token comment" spellcheck="true">#Set up the development environment by modifying the PATH and LD_LIBRARY_PATH variables:</span><span class="token comment" spellcheck="true">#cuda 环境变量</span>$ <span class="token function">export</span> PATH<span class="token operator">=</span>/usr/local/cuda-10.2/bin<span class="token variable">${PATH:+:${PATH}</span><span class="token punctuation">}</span>$ <span class="token function">export</span> LD_LIBRARY_PATH<span class="token operator">=</span>/usr/local/cuda-10.2/lib64\                         <span class="token variable">${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">#Install a writable copy of the samples then build and run the nbody sample: 每一个toolkit 都有一个sample可以测试是够安装好</span>$ cuda-install-samples-10.2.sh ~$ <span class="token function">cd</span> ~/NVIDIA_CUDA-10.2_Samples/5_Simulations/nbody$ <span class="token function">make</span>$ ./nbody<span class="token comment" spellcheck="true">#运行效果如下图所示</span></code></pre><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20191212213557977.png" alt="image-20191212213557977"></p><pre class=" language-shell"><code class="language-shell">#ubuntu cudnn 安装教程 https://developer.nvidia.com/rdp/cudnn-download  cudnn其实是一些加速CUDA性能的库，首先按照解压放到CUDA的相应路径中然后把其中的lib64关联到环境变量当中#将三个deb文件都下载下同时安装，否则会报错sudo dpkg -i libcudnn7*.deb</code></pre><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20191206194750114.png" alt="image-20191206194750114"></p><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20191212224333748.png" alt="image-20191212224333748"></p><p>网上一个脚本</p><pre class=" language-shell"><code class="language-shell"># WARNING: These steps seem to not work anymore!#!/bin/bash# Purge existign CUDA firstsudo apt --purge remove "cublas*" "cuda*"sudo apt --purge remove "nvidia*"# Install CUDA Toolkit 10wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-repo-ubuntu1804_10.0.130-1_amd64.debsudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub && sudo apt updatesudo dpkg -i cuda-repo-ubuntu1804_10.0.130-1_amd64.debsudo apt updatesudo apt install -y cuda# Install CuDNN 7 and NCCL 2wget https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/nvidia-machine-learning-repo-ubuntu1804_1.0.0-1_amd64.debsudo dpkg -i nvidia-machine-learning-repo-ubuntu1804_1.0.0-1_amd64.debsudo apt updatesudo apt install -y libcudnn7 libcudnn7-dev libnccl2 libc-ares-devsudo apt autoremovesudo apt upgrade# Link libraries to standard locationssudo mkdir -p /usr/local/cuda-10.0/nccl/libsudo ln -s /usr/lib/x86_64-linux-gnu/libnccl.so.2 /usr/local/cuda/nccl/lib/sudo ln -s /usr/lib/x86_64-linux-gnu/libcudnn.so.7 /usr/local/cuda-10.0/lib64/echo 'If everything worked fine, reboot now.'</code></pre><ul><li>window上查看cuda版本</li></ul><pre><code>nvcc --version   #使用命令#进入相应的目录  C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA#通过Nviadia 软件查看，这里俩个版本不一致，不清楚有没有问题？</code></pre><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20200203095344007.png" alt="image-20200203095344007"></p><ul><li><h2 id="相关故障记录"><a href="#相关故障记录" class="headerlink" title="相关故障记录"></a>相关故障记录</h2></li></ul><h3 id="内核相关的"><a href="#内核相关的" class="headerlink" title="内核相关的"></a>内核相关的</h3><ol><li><p>ctrl+alt+F1–F6  切换到相应的终端</p></li><li><p><strong>file ‘which update-initramfs’</strong>  学会这个命令</p><ul><li>编译内核的最后一步执行make install时会调用update-initramfs，update-initramfs继而调用mkinitramfs生成initrd.img.  一个往临时initrd目录copy文件的繁琐过程，mkinitramfs则用脚本替代了手工操作</li><li>1).在临时initrd目录下构建FHS规定的文件系统;2).按/etc/initramfs-tools/module和/etc/modules文件的配置，往lib/modules/目录拷贝模块，同时生成模块依赖文件modules.dep，以后内核启动后会从initramfs中(initrd.img被解压到内存中)按模块依赖关系modprobe模块;3).拷贝/etc/initramfs-tools/scripts和/usr/share/initramfs-tools/scripts下的配置文件到conf/目录下,以后内核启动，创建第一个进程init(initrd.img根目录下init.sh文件)会从conf/*读取配置，按一定的顺序加载模块/执行程序;4).模块的加载离不开modprobe工具集，因此需要拷贝modprobe工具集及其他工具到initrd目录结构下，同时解决这些工具的依赖关系(依赖的so文件的路径);5).所有步骤完成，调用cpio和gzip工具打包压缩临时initrd目录结构。</li></ul></li><li><p><strong>nouveau</strong>(英语：<a href="https://baike.baidu.com/item/%2F" target="_blank" rel="noopener">/</a><a href="https://baike.baidu.com/item/n" target="_blank" rel="noopener">n</a>uːˈ<a href="https://baike.baidu.com/item/v" target="_blank" rel="noopener">v</a>oʊ<a href="https://baike.baidu.com/item/%2F" target="_blank" rel="noopener">/</a>) 是一个自由开放源代码CPU驱动程序，是为AMD的<a href="https://baike.baidu.com/item/CPU" target="_blank" rel="noopener">CPU</a>所编写，也可用于属于<a href="https://baike.baidu.com/item/系统芯片" target="_blank" rel="noopener">系统芯片</a>的<a href="https://baike.baidu.com/item/高通" target="_blank" rel="noopener">高通</a>系列.</p><p>Nouveau的内核模块应该在系统启动时就已自动加载，如果没有的话：</p><ul><li>确保你的<a href="https://wiki.archlinux.org/index.php/Kernel_parameters" target="_blank" rel="noopener">内核参数</a>中没有<code>nomodeset</code> 或者 <code>vga=</code>， 因为Nouveau需要内核模式设置。</li><li>另外，确保你没有在 modprobe 配置文件 <code>/etc/modprobe.d/</code> 或 <code>/usr/lib/modprobe.d/</code> 中屏蔽 Nouveau。</li><li>检查 dmesg 中有没有 opcode 错误，如果有的话，将 <code>nouveau.config=NvBios=PRAMIN</code> 加入 <a href="https://wiki.archlinux.org/index.php/Kernel_parameters" target="_blank" rel="noopener">内核参数</a>禁止模块卸载</li><li>Nouveau 驱动依赖<a href="https://wiki.archlinux.org/index.php/Kernel_mode_setting" target="_blank" rel="noopener">Kernel mode setting</a> (KMS)。当系统启动时，KMS 模块会在其它模块之后启用，所以显示的分辨率发生改变。</li></ul></li><li><p><strong>dmesg</strong> 命令:用来显示开机信息, kernel会将开机信息存储在ring buffer中。开机时来不及查看信息，可利用dmesg来查看。开机信息亦保存在/var/log/dmesg</p><p>1) dmesg 是一个显示内核缓冲区系统控制信息的工具;比如系统在启动时的信息会写到/var/log/</p><p>2) dmesg 命令显示Linux内核的环形缓冲区信息，我们可以从中获得诸如系统架构、CPU、挂载的硬件，RAM等多个运行级别的大量的系统信息。当计算机启动时，系统内核（操作系统的核心部分）将会被加载到内存中。在加载的过程中会显示很多的信息，在这些信息中我们可以看到内核检测硬件设备</p><p>3) dmesg 命令设备故障的诊断是非常重要的。在dmesg命令的帮助下进行硬件的连接或断开连接操作时，我们可以看到硬件的检测或者断开连接的信息</p><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20191213212239267.png" alt="image-20191213212239267"></p></li><li><p>watch :  execute a program periodically, showing output fullscreen  <font color="red">watch “dmesg | tail -20” </font></p></li><li><p><strong>rmmod</strong>: 可删除不需要的模块。Linux操作系统的核心具有模块化的特性，因此在编译核心时，不需要把全部的功能都放入核心。</p></li><li><p><strong>lsmod</strong>: 显示内核中的模块作用同 <strong>cat /proc/devices</strong> </p></li><li><p><strong>modinfo</strong> 能查看模块的信息，通过查看模块信息来判定这个模块的用途；</p></li><li><p><strong>insmod</strong>: 向linux 内核中加载摸块  </p></li><li><p><strong>modprobe</strong> :向Linux内核中加载摸块,能够处理 module 载入的相依问题.  <font color="red">modprobe会检查/lib/modules/<code>uname -r</code>下的所有模块，除了/etc/modprobe.conf配置文件和/etc/modprobe.d目录以外。所有/etc/modprobe.d/arch/目录下的文件将被忽略。</font></p></li><li><p><font color="red">unable to correct problems,you have held broken package</font>    </p><pre class=" language-shell"><code class="language-shell">sudo apt install -fsudo aptitude install <packagename>  #get the detail informationsudo apt update  | sudo apt upgradesudo dpkg --configure -asudo dpkg --get-selection | grep hold #get actual held packagesdpkg --get-selections | grep linux-image  #产看内核文件有哪些</code></pre></li></ol><ol start="12"><li><p>Grub2介绍</p><ul><li>/boot/grub/grub.cfg 文件<ul><li>官方文件只说/boot/grub/grub.cfg不要手工修改，这个文件是运行 update-grub自动生成的。要修改配置文件的只要打开/boot/grub/grub.cfg文件，找到想修改的地方，然后根据注释找到相应的 /etc/default/grub或/etc/grub.d/ (folder)进行修改。</li><li>grub.cfg文件中主要包含两个部分，一部分是 各个启动项的定义，第二部分是启动界面的设置。你可以直接用gedit打开该文件看其中的内容。</li></ul></li><li>/etc/grub.d/ 文件夹<ul><li>定义各个启动项，其中的文件代表了一个或多个启动项，命名规范都是”两个数字<em>名称”，前面的两位数字确定这个或这多个启动项在启动界面的位置， 默认的 “00</em>“是预留给”00_header”的，”10_是预留给当前系统内核的，20_是预留给第三方程序的，除了这些你都可以使用，增加自己的，比如 05_ , 15_，数字越小越前面。</li><li>执行前面说的”update-grub”或者update- grub2”命令之后，这个文件夹中的文件就是用于生成 grub.cfg 中启动项的定义的</li></ul></li><li>/etc/default/grub 文件<ul><li>启动界面的配置，比如默认的启动项，等待用户选择启动项的时间等。当执行前面说的”update-grub”或者update-grub2”命令之后，这个文件的内容就 用于生成 grub.cfg 中启动界面的设置。</li></ul></li></ul></li><li><p>内核降级</p></li></ol><ul><li><p><strong>linux-image-</strong>: 内核镜像</p></li><li><p><strong>linux-image-extra-</strong>: 额外的内核模块</p></li><li><p><strong>linux-headers-</strong>: 内核头文件</p></li><li><p><a href="https://www.kernel.org/" target="_blank" rel="noopener">https://www.kernel.org/</a>  查看稳定的内核</p></li><li><p>官网: <a href="https://kernel.ubuntu.com/~kernel-ppa/mainline/" target="_blank" rel="noopener">https://kernel.ubuntu.com/~kernel-ppa/mainline/</a>  以及相应内核安装位置</p></li><li><p>安装4.19</p><ul><li>wget -c <a href="http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.19/linux-headers-4.19.0-041900_4.19.0-041900.201810221809_all.deb" target="_blank" rel="noopener">http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.19/linux-headers-4.19.0-041900_4.19.0-041900.201810221809_all.deb</a></li></ul><p>wget -c <a href="http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.19/linux-headers-4.19.0-041900-generic_4.19.0-041900.201810221809_amd64.deb" target="_blank" rel="noopener">http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.19/linux-headers-4.19.0-041900-generic_4.19.0-041900.201810221809_amd64.deb</a></p><p>wget -c <a href="http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.19/linux-image-unsigned-4.19.0-041900-generic_4.19.0-041900.201810221809_amd64.deb" target="_blank" rel="noopener">http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.19/linux-image-unsigned-4.19.0-041900-generic_4.19.0-041900.201810221809_amd64.deb</a></p><p>wget -c <a href="http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.19/linux-modules-4.19.0-041900-generic_4.19.0-041900.201810221809_amd64.deb" target="_blank" rel="noopener">http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.19/linux-modules-4.19.0-041900-generic_4.19.0-041900.201810221809_amd64.deb</a></p><p>sudo dpkg -i *.deb</p></li></ul><pre class=" language-shell"><code class="language-shell">#查看可用的内核apt-cache search linux-image#备份软件源sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak#添加一个源sudo vim /etc/apt/sources.listdeb http://security.ubuntu.com/ubuntu trusty-security mainsudo apt update#查看所有内核dpkg --get-selections| grep linux#安装指定版本内核sudo apt install 内核名称<linux-image-4.4.0-75-generic>dpkg -l | grep 内核名称<linux-image-extra-3.16.0-43-generic>  #查看是否安装成功#编辑grub 文件GRUB_DEFAULT=0GRUB_DEFAULT="Advanced options for Ubuntu>Ubuntu, with Linux 内核名称<5.0.0-36-generic>"Ubuntu,with Linux 5.3.0-25-generic#更新grub 引导sudo update-grubsudo rebootuname -r #查看当前版本是否安装正确#卸载内核sudo apt remove --purge 内核名称<linux-image-extra-3.16.0-43-generic>sudo dpkg --purge linux-image-4.19.0-041900-generic linux-image-unsigned-4.19.0-041900-genericsudo dpkg -P 内核名称  #通过deb包暗装的#关闭启动内核自动更新sudo apt-mark hold linux-image-generic linux-headers-genericsudo apt-mark unhold linux-image-generic linux-headers-generic</code></pre><p>使用指定版本内核  /boot 文件是内核相关的信息</p><ul><li><pre><code>grep menuentry /boot/grub/grub.cfg</code></pre></li></ul><p>例如文件如下:</p><pre><code>if [ x"${feature_menuentry_id}" = xy ]; then  menuentry_id_option="--id"  menuentry_id_option=""export menuentry_id_optionmenuentry 'Ubuntu' --class ubuntu --class gnu-linux --class gnu --class os $menuentry_id_option 'gnulinux-simple-5bce3795-da96-4c6f-bed2-67d37185a77d' {submenu 'Ubuntu 高级选项' $menuentry_id_option 'gnulinux-advanced-5bce3795-da96-4c6f-bed2-67d37185a77d' {    menuentry 'Ubuntu，Linux 4.8.0-26-lowlatency' --class ubuntu --class gnu-linux --class gnu --class os $menuentry_id_option 'gnulinux-4.4.0-45-lowlatency-advanced-5bce3795-da96-4c6f-bed2-67d37185a77d' {    menuentry 'Ubuntu, with Linux 4.8.0-26-lowlatency (upstart)' --class ubuntu --class gnu-linux --class gnu --class os $menuentry_id_option 'gnulinux-4.4.0-45-lowlatency-init-upstart-5bce3795-da96-4c6f-bed2-67d37185a77d' {    menuentry 'Ubuntu, with Linux 4.8.0-26-lowlatency (recovery mode)' --class ubuntu --class gnu-linux --class gnu --class os $menuentry_id_option 'gnulinux-4.4.0-45-lowlatency-recovery-5bce3795-da96-4c6f-bed2-67d37185a77d' {    menuentry 'Ubuntu，Linux 4.8.0-26-generic' --class ubuntu --class gnu-linux --class gnu --class os $menuentry_id_option 'gnulinux-4.4.0-45-generic-advanced-5bce3795-da96-4c6f-bed2-67d37185a77d' {    menuentry 'Ubuntu, with Linux 4.8.0-26-generic (upstart)' --class ubuntu --class gnu-linux --class gnu --class os $menuentry_id_option 'gnulinux-4.4.0-45-generic-init-upstart-5bce3795-da96-4c6f-bed2-67d37185a77d' {    menuentry 'Ubuntu, with Linux 4.8.0-26-generic (recovery mode)' --class ubuntu --class gnu-linux --class gnu --class os $menuentry_id_option 'gnulinux-4.4.0-45-generic-recovery-5bce3795-da96-4c6f-bed2-67d37185a77d' {    menuentry 'Ubuntu，Linux 4.4.0-21-generic' --class ubuntu --class gnu-linux --class gnu --class os $menuentry_id_option 'gnulinux-4.4.0-21-generic-advanced-5bce3795-da96-4c6f-bed2-67d37185a77d' {    menuentry 'Ubuntu, with Linux 4.4.0-21-generic (upstart)' --class ubuntu --class gnu-linux --class gnu --class os $menuentry_id_option 'gnulinux-4.4.0-21-generic-init-upstart-5bce3795-da96-4c6f-bed2-67d37185a77d' {    menuentry 'Ubuntu, with Linux 4.4.0-21-generic (recovery mode)' --class ubuntu --class gnu-linux --class gnu --class os $menuentry_id_option 'gnulinux-4.4.0-21-generic-recovery-5bce3795-da96-4c6f-bed2-67d37185a77d' {menuentry 'Memory test (memtest86+)' {menuentry 'Memory test (memtest86+, serial console 115200)' {</code></pre><p>menuentry 代表一个内核, 从0开始记数字: 例如如果使用<strong>以4.4.0-21内核版本启动，则将文件/etc/default/grub中</strong></p><pre><code>GRUB_DEFAULT=0 </code></pre><p>改为 </p><pre><code>GRUB_DEFAULT=6</code></pre><p>或者改为</p><pre><code>GRUB_DEFAULT=”Ubuntu，Linux 4.4.0-21-generic“</code></pre><ul><li><strong>sudo update-grub</strong> 然后重启执行uname -r  查看系统内核</li></ul><ol><li><font color="red">Nouveau unknown chipset at install </font>  显卡驱动问题</li></ol><pre class=" language-shell"><code class="language-shell">sudo apt updatesudo apt upgradesudo ubuntu-drivers devicessudo apt install nvidia-xxx#如果没有NVIDIA驱动的话,  </code></pre><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a><strong>文件</strong></h3><ul><li><p>/boot 文件:  系统内核文件 ,启动管理程序grub 的目录</p><ul><li>Initrd 文件,系统启动摸块的只要来源,系统启动所需加载的虚拟磁盘</li><li>System.map 系统内核中的变量对应表</li><li>vmlinuz 是启动过程系统实际所用的内核</li><li>grub目录是启动管理程序的<ul><li>grub.conf 文件 从哪个内核进入,启动时间等</li></ul></li><li>kernel kernel主要负责的是北桥、南桥、CPU及内存，可见它们都是整个主机最重要的硬件核心部分，kernel如果处了问题，系统肯定无法启动起来。</li><li>kernel、initrd和system module是依次加载的。initrd包含一部分内核模块，主要是一些关键的外部硬件，如SATA、SCSI和USB等外设。它如果失败当然也会影响系统启动。而system module这些系统中的模块，是与支持和启动无很大关系的硬件有关，如果没有这些硬件设备的支持，系统也可以启动完成，只是存在功能上的缺失，如声卡、网卡、显卡等。这些系统模块也可以在启动后，以modprobe</li></ul></li><li><p>/lib 标准程序设计库，又叫动态链接共享库，作用类似windows里的.dll文件</p></li><li><p>/sbin 系统管理命令，这里存放的是系统管理员使用的管理程序</p></li><li><p>/bin 二进制可执行命令<br>/dev 设备特殊文件<br>/etc 系统管理和配置文件<br>/etc/rc.d 启动的配置文件和脚本</p></li><li><p>/lost+found 这个目录平时是空的，系统非正常关机而留下“无家可归”的文件（windows下叫什么.chk）就在这里</p></li><li><p>/usr 最庞大的目录，要用到的应用程序和文件几乎都在这个目录。其中包含：<br>/usr/x11r6 存放x window的目录<br>/usr/bin 众多的应用程序<br>/usr/sbin 超级用户的一些管理程序<br><strong>/usr/include linux下开发和编译应用程序所需要的头文件</strong><br><strong>/usr/lib 常用的动态链接库和软件包的配置文件</strong><br><strong>/usr/doc linux文档</strong> /usr/man 帮助文档  /usr/info<br><strong>/usr/src 源代码，linux内核的源代码就放在/usr/src/linux里</strong><br><strong>/usr/local/bin 本地增加的命令</strong><br><strong>/usr/local/lib 本地增加的库</strong></p><p><img src="https://gitee.com/github-25970295/blogImage/raw/master/img/image-20191213221715677.png" alt="image-20191213221715677"></p><p>/var 包含系统一般运行时要改变的数据。通常这些数据所在的目录的大小是要经常变化<br>或扩充的。原来/ v a r目录中有些内容是在/ u s r中的，但为了保持/ u s r目录的相对稳定，就把那<br>些需要经常改变的目录放到/ v a r中了。每个系统是特定的，即不通过网络与其他计算机共享。</p><ul><li>/var/log:各种程序的日志( l o g )文件，尤其是login (/var/log/wtmp log纪录所有到系统的登录和注<br>销) 和syslog (/var/log/messages 纪录存储所有核心和系统程序信息)。/var/log 里的文件经常不<br>确定地增长，应该定期清除。</li></ul><p>/proc文件系统<br>/proc 文件系统是一个伪的文件系统，就是说它是一个实际上不存在的目录，因而这是一<br>个非常特殊的目录。它并不存在于某个磁盘上，而是由核心在内存中产生。这个目录用于提<br>供关于系统的信息。下面说明一些最重要的文件和目录(/proc 文件系统在proc man页中有更详<br>细的说明)。<br>\1. /proc/x<br>关于进程x的信息目录，这一x是这一进程的标识号。每个进程在/proc 下有一个名为自<br>己进程号的目录。<br>\2. /proc/cpuinfo<br>存放处理器( c p u )的信息，如c p u的类型、制造商、型号和性能等。<br>\3. /proc/devices<br>当前运行的核心配置的设备驱动的列表。<br>\4. /proc/dma<br>显示当前使用的d m a通道。<br>\5. /proc/filesystems<br>核心配置的文件系统信息。<br>\6. /proc/interrupts<br>显示被占用的中断信息和占用者的信息，以及被占用的数量。<br>\7. /proc/ioports<br>当前使用的i / o端口。<br>\8. /proc/kcore<br>系统物理内存映像。与物理内存大小完全一样，然而实际上没有占用这么多内存；它仅<br>仅是在程序访问它时才被创建。(注意：除非你把它拷贝到什么地方，否则/proc 下没有任何<br>东西占用任何磁盘空间。)<br>\9. /proc/kmsg<br>核心输出的消息。也会被送到s y s l o g。<br>\10. /proc/ksyms<br>核心符号表。<br>\11. /proc/loadavg<br>系统“平均负载”； 3个没有意义的指示器指出系统当前的工作量。<br>\12. /proc/meminfo<br>各种存储器使用信息，包括物理内存和交换分区( s w a p )。<br>\13. /proc/modules<br>存放当前加载了哪些核心模块信息。<br>\14. /proc/net<br>网络协议状态信息。<br>\15. /proc/self<br>存放到查看/proc 的程序的进程目录的符号连接。当2个进程查看/proc 时，这将会是不同<br>的连接。这主要便于程序得到它自己的进程目录。<br>\16. /proc/stat<br>系统的不同状态，例如，系统启动后页面发生错误的次数。<br>\17. /proc/uptime<br>系统启动的时间长度。<br>\18. /proc/version<br>核心版本。</p></li></ul><ol><li><p><strong>ACPI在</strong>BIOS和其他系统硬件中被实现，它就可以由操作系统所调用(触发)。</p><p>ACPI可以实现的功能包括：</p><p>系统电源管理（System power management）</p><p>设备电源管理（Device power management）</p><p>处理器电源管理（Processor power management）</p><p>设备和处理器性能管理（Device and processor performance management）</p><p>配置/即插即用（Configuration/Plug and Play）</p><p>系统事件（System Event）</p><p>电池管理（Battery management）</p><p>温度管理（Thermal management）</p><p><a href="https://baike.baidu.com/item/嵌入式控制器" target="_blank" rel="noopener">嵌入式控制器</a>（Embedded Controller）</p><p>SMBus控制器（SMBus Controller</p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OperationSystem </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue Style Typora Theme</title>
      <link href="/2018/11/19/ruan-jian-gong-ju/hexotypora/vue-wen-dang-feng-ge-de-typora-zhu-ti/"/>
      <url>/2018/11/19/ruan-jian-gong-ju/hexotypora/vue-wen-dang-feng-ge-de-typora-zhu-ti/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://github.com/blinkfox/typora-vue-theme" target="_blank" rel="noopener">typora-vue-theme</a> 是 Typora Markdown 文档编辑器中一款类似<a href="https://vuejs.org/" target="_blank" rel="noopener">Vue</a>文档风格的主题。</p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://www.typora.io/" target="_blank" rel="noopener">Typora</a>是一款支持实时预览的 Markdown 编辑器和阅读器，支持<code>Windows</code>、<code>macOS</code>、<code>Linux</code>三大平台。Typora 作为一款合格的 Markdown 编辑器，支持图片、列表、表格、代码、公式、目录等功能，同时这款软件还支持（一键）动态预览功能，让一切都变得如此干净、纯粹。并且有多种主题模板。<strong><a href="https://github.com/blinkfox/typora-vue-theme" target="_blank" rel="noopener">typora-vue-theme</a>就是参考了<a href="https://vuejs.org/" target="_blank" rel="noopener">Vue</a>文档风格而开发的一个 Typora 自定义主题</strong>。</p><h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h2><ol><li>下载本主题中的<code>vue.css</code>、<code>vue-dark.css</code>文件和包含字体的<code>vue</code>文件夹；</li><li>打开 Typora，点击“<strong>偏好设置</strong>” =&gt; “<strong>打开主题文件夹</strong>”按钮，将弹出 Typora 的主题文件夹；</li><li>将下载好的<code>vue.css</code>和<code>vue-dark.css</code>文件和包含字体的<code>vue</code>文件夹放到 Typora 的主题文件夹中；</li><li>关闭并重新打开 Typora，从菜单栏中选择 “<strong>主题</strong>” =&gt; “<strong>Vue</strong>” 或者 “<strong>Vue Dark</strong>” 即可。</li></ol><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="http://static.blinkfox.com/typora_vue_theme_screen_01.png" alt=""></p><p><img src="http://static.blinkfox.com/typora_vue_theme_screen_02.png" alt=""></p><p><img src="http://static.blinkfox.com/typora_vue_theme_screen_03.png" alt=""></p><h3 id="Vue-Dark"><a href="#Vue-Dark" class="headerlink" title="Vue Dark"></a>Vue Dark</h3><p><img src="https://github.com/MamoruDS/typora-vue-theme/raw/master/screenshots/screenshot_01.png" alt=""></p><p><img src="https://github.com/MamoruDS/typora-vue-theme/raw/master/screenshots/screenshot_02.png" alt=""></p><blockquote><p><strong>感谢</strong>: 本主题中的<code>vue-dark.css</code>来自<a href="https://github.com/MamoruDS/typora-vue-dark-theme" target="_blank" rel="noopener">typora-vue-dark-theme</a>.</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
